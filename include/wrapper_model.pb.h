// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapper_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wrapper_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wrapper_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wrapper_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wrapper_5fmodel_2eproto;
namespace mediapipe {
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class DetectionList;
class DetectionListDefaultTypeInternal;
extern DetectionListDefaultTypeInternal _DetectionList_default_instance_;
class Detection_AssociatedDetection;
class Detection_AssociatedDetectionDefaultTypeInternal;
extern Detection_AssociatedDetectionDefaultTypeInternal _Detection_AssociatedDetection_default_instance_;
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class LandmarkList;
class LandmarkListDefaultTypeInternal;
extern LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
class LocationData;
class LocationDataDefaultTypeInternal;
extern LocationDataDefaultTypeInternal _LocationData_default_instance_;
class LocationData_BinaryMask;
class LocationData_BinaryMaskDefaultTypeInternal;
extern LocationData_BinaryMaskDefaultTypeInternal _LocationData_BinaryMask_default_instance_;
class LocationData_BoundingBox;
class LocationData_BoundingBoxDefaultTypeInternal;
extern LocationData_BoundingBoxDefaultTypeInternal _LocationData_BoundingBox_default_instance_;
class LocationData_RelativeBoundingBox;
class LocationData_RelativeBoundingBoxDefaultTypeInternal;
extern LocationData_RelativeBoundingBoxDefaultTypeInternal _LocationData_RelativeBoundingBox_default_instance_;
class LocationData_RelativeKeypoint;
class LocationData_RelativeKeypointDefaultTypeInternal;
extern LocationData_RelativeKeypointDefaultTypeInternal _LocationData_RelativeKeypoint_default_instance_;
class NormalizedLandmark;
class NormalizedLandmarkDefaultTypeInternal;
extern NormalizedLandmarkDefaultTypeInternal _NormalizedLandmark_default_instance_;
class NormalizedLandmarkGroup;
class NormalizedLandmarkGroupDefaultTypeInternal;
extern NormalizedLandmarkGroupDefaultTypeInternal _NormalizedLandmarkGroup_default_instance_;
class NormalizedLandmarkList;
class NormalizedLandmarkListDefaultTypeInternal;
extern NormalizedLandmarkListDefaultTypeInternal _NormalizedLandmarkList_default_instance_;
class NormalizedRect;
class NormalizedRectDefaultTypeInternal;
extern NormalizedRectDefaultTypeInternal _NormalizedRect_default_instance_;
class Rasterization;
class RasterizationDefaultTypeInternal;
extern RasterizationDefaultTypeInternal _Rasterization_default_instance_;
class Rasterization_Interval;
class Rasterization_IntervalDefaultTypeInternal;
extern Rasterization_IntervalDefaultTypeInternal _Rasterization_Interval_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class WrapperFaceMesh;
class WrapperFaceMeshDefaultTypeInternal;
extern WrapperFaceMeshDefaultTypeInternal _WrapperFaceMesh_default_instance_;
class WrapperHandTracking;
class WrapperHandTrackingDefaultTypeInternal;
extern WrapperHandTrackingDefaultTypeInternal _WrapperHandTracking_default_instance_;
class WrapperIris;
class WrapperIrisDefaultTypeInternal;
extern WrapperIrisDefaultTypeInternal _WrapperIris_default_instance_;
class WrapperMultiHand;
class WrapperMultiHandDefaultTypeInternal;
extern WrapperMultiHandDefaultTypeInternal _WrapperMultiHand_default_instance_;
class WrapperObjectTracking;
class WrapperObjectTrackingDefaultTypeInternal;
extern WrapperObjectTrackingDefaultTypeInternal _WrapperObjectTracking_default_instance_;
class WrapperUpperBody;
class WrapperUpperBodyDefaultTypeInternal;
extern WrapperUpperBodyDefaultTypeInternal _WrapperUpperBody_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::Detection* Arena::CreateMaybeMessage<::mediapipe::Detection>(Arena*);
template<> ::mediapipe::DetectionList* Arena::CreateMaybeMessage<::mediapipe::DetectionList>(Arena*);
template<> ::mediapipe::Detection_AssociatedDetection* Arena::CreateMaybeMessage<::mediapipe::Detection_AssociatedDetection>(Arena*);
template<> ::mediapipe::Landmark* Arena::CreateMaybeMessage<::mediapipe::Landmark>(Arena*);
template<> ::mediapipe::LandmarkList* Arena::CreateMaybeMessage<::mediapipe::LandmarkList>(Arena*);
template<> ::mediapipe::LocationData* Arena::CreateMaybeMessage<::mediapipe::LocationData>(Arena*);
template<> ::mediapipe::LocationData_BinaryMask* Arena::CreateMaybeMessage<::mediapipe::LocationData_BinaryMask>(Arena*);
template<> ::mediapipe::LocationData_BoundingBox* Arena::CreateMaybeMessage<::mediapipe::LocationData_BoundingBox>(Arena*);
template<> ::mediapipe::LocationData_RelativeBoundingBox* Arena::CreateMaybeMessage<::mediapipe::LocationData_RelativeBoundingBox>(Arena*);
template<> ::mediapipe::LocationData_RelativeKeypoint* Arena::CreateMaybeMessage<::mediapipe::LocationData_RelativeKeypoint>(Arena*);
template<> ::mediapipe::NormalizedLandmark* Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmark>(Arena*);
template<> ::mediapipe::NormalizedLandmarkGroup* Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmarkGroup>(Arena*);
template<> ::mediapipe::NormalizedLandmarkList* Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(Arena*);
template<> ::mediapipe::NormalizedRect* Arena::CreateMaybeMessage<::mediapipe::NormalizedRect>(Arena*);
template<> ::mediapipe::Rasterization* Arena::CreateMaybeMessage<::mediapipe::Rasterization>(Arena*);
template<> ::mediapipe::Rasterization_Interval* Arena::CreateMaybeMessage<::mediapipe::Rasterization_Interval>(Arena*);
template<> ::mediapipe::Rect* Arena::CreateMaybeMessage<::mediapipe::Rect>(Arena*);
template<> ::mediapipe::WrapperFaceMesh* Arena::CreateMaybeMessage<::mediapipe::WrapperFaceMesh>(Arena*);
template<> ::mediapipe::WrapperHandTracking* Arena::CreateMaybeMessage<::mediapipe::WrapperHandTracking>(Arena*);
template<> ::mediapipe::WrapperIris* Arena::CreateMaybeMessage<::mediapipe::WrapperIris>(Arena*);
template<> ::mediapipe::WrapperMultiHand* Arena::CreateMaybeMessage<::mediapipe::WrapperMultiHand>(Arena*);
template<> ::mediapipe::WrapperObjectTracking* Arena::CreateMaybeMessage<::mediapipe::WrapperObjectTracking>(Arena*);
template<> ::mediapipe::WrapperUpperBody* Arena::CreateMaybeMessage<::mediapipe::WrapperUpperBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum LocationData_Format : int {
  LocationData_Format_GLOBAL = 0,
  LocationData_Format_BOUNDING_BOX = 1,
  LocationData_Format_RELATIVE_BOUNDING_BOX = 2,
  LocationData_Format_MASK = 3
};
bool LocationData_Format_IsValid(int value);
constexpr LocationData_Format LocationData_Format_Format_MIN = LocationData_Format_GLOBAL;
constexpr LocationData_Format LocationData_Format_Format_MAX = LocationData_Format_MASK;
constexpr int LocationData_Format_Format_ARRAYSIZE = LocationData_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationData_Format_descriptor();
template<typename T>
inline const std::string& LocationData_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocationData_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocationData_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocationData_Format_descriptor(), enum_t_value);
}
inline bool LocationData_Format_Parse(
    const std::string& name, LocationData_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocationData_Format>(
    LocationData_Format_descriptor(), name, value);
}
// ===================================================================

class Landmark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Landmark) */ {
 public:
  inline Landmark() : Landmark(nullptr) {};
  virtual ~Landmark();

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Landmark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Landmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(nullptr);
  }

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Landmark";
  }
  protected:
  explicit Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Landmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LandmarkList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarkList) */ {
 public:
  inline LandmarkList() : LandmarkList(nullptr) {};
  virtual ~LandmarkList();

  LandmarkList(const LandmarkList& from);
  LandmarkList(LandmarkList&& from) noexcept
    : LandmarkList() {
    *this = ::std::move(from);
  }

  inline LandmarkList& operator=(const LandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkList& operator=(LandmarkList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkList* internal_default_instance() {
    return reinterpret_cast<const LandmarkList*>(
               &_LandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LandmarkList& a, LandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkList* New() const final {
    return CreateMaybeMessage<LandmarkList>(nullptr);
  }

  LandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkList& from);
  void MergeFrom(const LandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarkList";
  }
  protected:
  explicit LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .mediapipe.Landmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::mediapipe::Landmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >*
      mutable_landmark();
  private:
  const ::mediapipe::Landmark& _internal_landmark(int index) const;
  ::mediapipe::Landmark* _internal_add_landmark();
  public:
  const ::mediapipe::Landmark& landmark(int index) const;
  ::mediapipe::Landmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:mediapipe.LandmarkList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark > landmark_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class NormalizedLandmark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmark) */ {
 public:
  inline NormalizedLandmark() : NormalizedLandmark(nullptr) {};
  virtual ~NormalizedLandmark();

  NormalizedLandmark(const NormalizedLandmark& from);
  NormalizedLandmark(NormalizedLandmark&& from) noexcept
    : NormalizedLandmark() {
    *this = ::std::move(from);
  }

  inline NormalizedLandmark& operator=(const NormalizedLandmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedLandmark& operator=(NormalizedLandmark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedLandmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedLandmark* internal_default_instance() {
    return reinterpret_cast<const NormalizedLandmark*>(
               &_NormalizedLandmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NormalizedLandmark& a, NormalizedLandmark& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedLandmark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedLandmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedLandmark* New() const final {
    return CreateMaybeMessage<NormalizedLandmark>(nullptr);
  }

  NormalizedLandmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedLandmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedLandmark& from);
  void MergeFrom(const NormalizedLandmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedLandmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedLandmark";
  }
  protected:
  explicit NormalizedLandmark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class NormalizedLandmarkList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmarkList) */ {
 public:
  inline NormalizedLandmarkList() : NormalizedLandmarkList(nullptr) {};
  virtual ~NormalizedLandmarkList();

  NormalizedLandmarkList(const NormalizedLandmarkList& from);
  NormalizedLandmarkList(NormalizedLandmarkList&& from) noexcept
    : NormalizedLandmarkList() {
    *this = ::std::move(from);
  }

  inline NormalizedLandmarkList& operator=(const NormalizedLandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedLandmarkList& operator=(NormalizedLandmarkList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedLandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedLandmarkList* internal_default_instance() {
    return reinterpret_cast<const NormalizedLandmarkList*>(
               &_NormalizedLandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NormalizedLandmarkList& a, NormalizedLandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedLandmarkList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedLandmarkList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedLandmarkList* New() const final {
    return CreateMaybeMessage<NormalizedLandmarkList>(nullptr);
  }

  NormalizedLandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedLandmarkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedLandmarkList& from);
  void MergeFrom(const NormalizedLandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedLandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedLandmarkList";
  }
  protected:
  explicit NormalizedLandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::mediapipe::NormalizedLandmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >*
      mutable_landmark();
  private:
  const ::mediapipe::NormalizedLandmark& _internal_landmark(int index) const;
  ::mediapipe::NormalizedLandmark* _internal_add_landmark();
  public:
  const ::mediapipe::NormalizedLandmark& landmark(int index) const;
  ::mediapipe::NormalizedLandmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmarkList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark > landmark_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class NormalizedLandmarkGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmarkGroup) */ {
 public:
  inline NormalizedLandmarkGroup() : NormalizedLandmarkGroup(nullptr) {};
  virtual ~NormalizedLandmarkGroup();

  NormalizedLandmarkGroup(const NormalizedLandmarkGroup& from);
  NormalizedLandmarkGroup(NormalizedLandmarkGroup&& from) noexcept
    : NormalizedLandmarkGroup() {
    *this = ::std::move(from);
  }

  inline NormalizedLandmarkGroup& operator=(const NormalizedLandmarkGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedLandmarkGroup& operator=(NormalizedLandmarkGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedLandmarkGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedLandmarkGroup* internal_default_instance() {
    return reinterpret_cast<const NormalizedLandmarkGroup*>(
               &_NormalizedLandmarkGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NormalizedLandmarkGroup& a, NormalizedLandmarkGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedLandmarkGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedLandmarkGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedLandmarkGroup* New() const final {
    return CreateMaybeMessage<NormalizedLandmarkGroup>(nullptr);
  }

  NormalizedLandmarkGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedLandmarkGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedLandmarkGroup& from);
  void MergeFrom(const NormalizedLandmarkGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedLandmarkGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedLandmarkGroup";
  }
  protected:
  explicit NormalizedLandmarkGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarklistFieldNumber = 1,
  };
  // repeated .mediapipe.NormalizedLandmarkList landmarklist = 1;
  int landmarklist_size() const;
  private:
  int _internal_landmarklist_size() const;
  public:
  void clear_landmarklist();
  ::mediapipe::NormalizedLandmarkList* mutable_landmarklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmarkList >*
      mutable_landmarklist();
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_landmarklist(int index) const;
  ::mediapipe::NormalizedLandmarkList* _internal_add_landmarklist();
  public:
  const ::mediapipe::NormalizedLandmarkList& landmarklist(int index) const;
  ::mediapipe::NormalizedLandmarkList* add_landmarklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmarkList >&
      landmarklist() const;

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmarkGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmarkList > landmarklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {};
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Rect";
  }
  protected:
  explicit Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXCenterFieldNumber = 1,
    kYCenterFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kRectIdFieldNumber = 6,
    kRotationFieldNumber = 5,
  };
  // required int32 x_center = 1;
  bool has_x_center() const;
  private:
  bool _internal_has_x_center() const;
  public:
  void clear_x_center();
  ::PROTOBUF_NAMESPACE_ID::int32 x_center() const;
  void set_x_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x_center() const;
  void _internal_set_x_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y_center = 2;
  bool has_y_center() const;
  private:
  bool _internal_has_y_center() const;
  public:
  void clear_y_center();
  ::PROTOBUF_NAMESPACE_ID::int32 y_center() const;
  void set_y_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y_center() const;
  void _internal_set_y_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 rect_id = 6;
  bool has_rect_id() const;
  private:
  bool _internal_has_rect_id() const;
  public:
  void clear_rect_id();
  ::PROTOBUF_NAMESPACE_ID::int64 rect_id() const;
  void set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rect_id() const;
  void _internal_set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float rotation = 5 [default = 0];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Rect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_center_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_center_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int64 rect_id_;
  float rotation_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class NormalizedRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedRect) */ {
 public:
  inline NormalizedRect() : NormalizedRect(nullptr) {};
  virtual ~NormalizedRect();

  NormalizedRect(const NormalizedRect& from);
  NormalizedRect(NormalizedRect&& from) noexcept
    : NormalizedRect() {
    *this = ::std::move(from);
  }

  inline NormalizedRect& operator=(const NormalizedRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedRect& operator=(NormalizedRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedRect* internal_default_instance() {
    return reinterpret_cast<const NormalizedRect*>(
               &_NormalizedRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NormalizedRect& a, NormalizedRect& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedRect* New() const final {
    return CreateMaybeMessage<NormalizedRect>(nullptr);
  }

  NormalizedRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedRect& from);
  void MergeFrom(const NormalizedRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedRect";
  }
  protected:
  explicit NormalizedRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXCenterFieldNumber = 1,
    kYCenterFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kRectIdFieldNumber = 6,
    kRotationFieldNumber = 5,
  };
  // required float x_center = 1;
  bool has_x_center() const;
  private:
  bool _internal_has_x_center() const;
  public:
  void clear_x_center();
  float x_center() const;
  void set_x_center(float value);
  private:
  float _internal_x_center() const;
  void _internal_set_x_center(float value);
  public:

  // required float y_center = 2;
  bool has_y_center() const;
  private:
  bool _internal_has_y_center() const;
  public:
  void clear_y_center();
  float y_center() const;
  void set_y_center(float value);
  private:
  float _internal_y_center() const;
  void _internal_set_y_center(float value);
  public:

  // required float height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // required float width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional int64 rect_id = 6;
  bool has_rect_id() const;
  private:
  bool _internal_has_rect_id() const;
  public:
  void clear_rect_id();
  ::PROTOBUF_NAMESPACE_ID::int64 rect_id() const;
  void set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rect_id() const;
  void _internal_set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float rotation = 5 [default = 0];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_center_;
  float y_center_;
  float height_;
  float width_;
  ::PROTOBUF_NAMESPACE_ID::int64 rect_id_;
  float rotation_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Rasterization_Interval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Rasterization.Interval) */ {
 public:
  inline Rasterization_Interval() : Rasterization_Interval(nullptr) {};
  virtual ~Rasterization_Interval();

  Rasterization_Interval(const Rasterization_Interval& from);
  Rasterization_Interval(Rasterization_Interval&& from) noexcept
    : Rasterization_Interval() {
    *this = ::std::move(from);
  }

  inline Rasterization_Interval& operator=(const Rasterization_Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rasterization_Interval& operator=(Rasterization_Interval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rasterization_Interval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rasterization_Interval* internal_default_instance() {
    return reinterpret_cast<const Rasterization_Interval*>(
               &_Rasterization_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Rasterization_Interval& a, Rasterization_Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Rasterization_Interval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rasterization_Interval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rasterization_Interval* New() const final {
    return CreateMaybeMessage<Rasterization_Interval>(nullptr);
  }

  Rasterization_Interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rasterization_Interval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rasterization_Interval& from);
  void MergeFrom(const Rasterization_Interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rasterization_Interval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Rasterization.Interval";
  }
  protected:
  explicit Rasterization_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYFieldNumber = 1,
    kLeftXFieldNumber = 2,
    kRightXFieldNumber = 3,
  };
  // required int32 y = 1;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 left_x = 2;
  bool has_left_x() const;
  private:
  bool _internal_has_left_x() const;
  public:
  void clear_left_x();
  ::PROTOBUF_NAMESPACE_ID::int32 left_x() const;
  void set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_x() const;
  void _internal_set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 right_x = 3;
  bool has_right_x() const;
  private:
  bool _internal_has_right_x() const;
  public:
  void clear_right_x();
  ::PROTOBUF_NAMESPACE_ID::int32 right_x() const;
  void set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_x() const;
  void _internal_set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Rasterization.Interval)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_x_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Rasterization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Rasterization) */ {
 public:
  inline Rasterization() : Rasterization(nullptr) {};
  virtual ~Rasterization();

  Rasterization(const Rasterization& from);
  Rasterization(Rasterization&& from) noexcept
    : Rasterization() {
    *this = ::std::move(from);
  }

  inline Rasterization& operator=(const Rasterization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rasterization& operator=(Rasterization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rasterization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rasterization* internal_default_instance() {
    return reinterpret_cast<const Rasterization*>(
               &_Rasterization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Rasterization& a, Rasterization& b) {
    a.Swap(&b);
  }
  inline void Swap(Rasterization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rasterization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rasterization* New() const final {
    return CreateMaybeMessage<Rasterization>(nullptr);
  }

  Rasterization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rasterization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rasterization& from);
  void MergeFrom(const Rasterization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rasterization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Rasterization";
  }
  protected:
  explicit Rasterization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Rasterization_Interval Interval;

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
  };
  // repeated .mediapipe.Rasterization.Interval interval = 1;
  int interval_size() const;
  private:
  int _internal_interval_size() const;
  public:
  void clear_interval();
  ::mediapipe::Rasterization_Interval* mutable_interval(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Rasterization_Interval >*
      mutable_interval();
  private:
  const ::mediapipe::Rasterization_Interval& _internal_interval(int index) const;
  ::mediapipe::Rasterization_Interval* _internal_add_interval();
  public:
  const ::mediapipe::Rasterization_Interval& interval(int index) const;
  ::mediapipe::Rasterization_Interval* add_interval();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Rasterization_Interval >&
      interval() const;

  // @@protoc_insertion_point(class_scope:mediapipe.Rasterization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Rasterization_Interval > interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LocationData_BoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LocationData.BoundingBox) */ {
 public:
  inline LocationData_BoundingBox() : LocationData_BoundingBox(nullptr) {};
  virtual ~LocationData_BoundingBox();

  LocationData_BoundingBox(const LocationData_BoundingBox& from);
  LocationData_BoundingBox(LocationData_BoundingBox&& from) noexcept
    : LocationData_BoundingBox() {
    *this = ::std::move(from);
  }

  inline LocationData_BoundingBox& operator=(const LocationData_BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationData_BoundingBox& operator=(LocationData_BoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationData_BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationData_BoundingBox* internal_default_instance() {
    return reinterpret_cast<const LocationData_BoundingBox*>(
               &_LocationData_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LocationData_BoundingBox& a, LocationData_BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationData_BoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationData_BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationData_BoundingBox* New() const final {
    return CreateMaybeMessage<LocationData_BoundingBox>(nullptr);
  }

  LocationData_BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationData_BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationData_BoundingBox& from);
  void MergeFrom(const LocationData_BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationData_BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LocationData.BoundingBox";
  }
  protected:
  explicit LocationData_BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // optional int32 xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  ::PROTOBUF_NAMESPACE_ID::int32 xmin() const;
  void set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xmin() const;
  void _internal_set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  ::PROTOBUF_NAMESPACE_ID::int32 ymin() const;
  void set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ymin() const;
  void _internal_set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LocationData.BoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 xmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 ymin_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LocationData_RelativeBoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LocationData.RelativeBoundingBox) */ {
 public:
  inline LocationData_RelativeBoundingBox() : LocationData_RelativeBoundingBox(nullptr) {};
  virtual ~LocationData_RelativeBoundingBox();

  LocationData_RelativeBoundingBox(const LocationData_RelativeBoundingBox& from);
  LocationData_RelativeBoundingBox(LocationData_RelativeBoundingBox&& from) noexcept
    : LocationData_RelativeBoundingBox() {
    *this = ::std::move(from);
  }

  inline LocationData_RelativeBoundingBox& operator=(const LocationData_RelativeBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationData_RelativeBoundingBox& operator=(LocationData_RelativeBoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationData_RelativeBoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationData_RelativeBoundingBox* internal_default_instance() {
    return reinterpret_cast<const LocationData_RelativeBoundingBox*>(
               &_LocationData_RelativeBoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LocationData_RelativeBoundingBox& a, LocationData_RelativeBoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationData_RelativeBoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationData_RelativeBoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationData_RelativeBoundingBox* New() const final {
    return CreateMaybeMessage<LocationData_RelativeBoundingBox>(nullptr);
  }

  LocationData_RelativeBoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationData_RelativeBoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationData_RelativeBoundingBox& from);
  void MergeFrom(const LocationData_RelativeBoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationData_RelativeBoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LocationData.RelativeBoundingBox";
  }
  protected:
  explicit LocationData_RelativeBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // optional float xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // optional float ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // optional float width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LocationData.RelativeBoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float xmin_;
  float ymin_;
  float width_;
  float height_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LocationData_BinaryMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LocationData.BinaryMask) */ {
 public:
  inline LocationData_BinaryMask() : LocationData_BinaryMask(nullptr) {};
  virtual ~LocationData_BinaryMask();

  LocationData_BinaryMask(const LocationData_BinaryMask& from);
  LocationData_BinaryMask(LocationData_BinaryMask&& from) noexcept
    : LocationData_BinaryMask() {
    *this = ::std::move(from);
  }

  inline LocationData_BinaryMask& operator=(const LocationData_BinaryMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationData_BinaryMask& operator=(LocationData_BinaryMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationData_BinaryMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationData_BinaryMask* internal_default_instance() {
    return reinterpret_cast<const LocationData_BinaryMask*>(
               &_LocationData_BinaryMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LocationData_BinaryMask& a, LocationData_BinaryMask& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationData_BinaryMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationData_BinaryMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationData_BinaryMask* New() const final {
    return CreateMaybeMessage<LocationData_BinaryMask>(nullptr);
  }

  LocationData_BinaryMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationData_BinaryMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationData_BinaryMask& from);
  void MergeFrom(const LocationData_BinaryMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationData_BinaryMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LocationData.BinaryMask";
  }
  protected:
  explicit LocationData_BinaryMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRasterizationFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional .mediapipe.Rasterization rasterization = 3;
  bool has_rasterization() const;
  private:
  bool _internal_has_rasterization() const;
  public:
  void clear_rasterization();
  const ::mediapipe::Rasterization& rasterization() const;
  ::mediapipe::Rasterization* release_rasterization();
  ::mediapipe::Rasterization* mutable_rasterization();
  void set_allocated_rasterization(::mediapipe::Rasterization* rasterization);
  private:
  const ::mediapipe::Rasterization& _internal_rasterization() const;
  ::mediapipe::Rasterization* _internal_mutable_rasterization();
  public:
  void unsafe_arena_set_allocated_rasterization(
      ::mediapipe::Rasterization* rasterization);
  ::mediapipe::Rasterization* unsafe_arena_release_rasterization();

  // optional int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LocationData.BinaryMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::Rasterization* rasterization_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LocationData_RelativeKeypoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LocationData.RelativeKeypoint) */ {
 public:
  inline LocationData_RelativeKeypoint() : LocationData_RelativeKeypoint(nullptr) {};
  virtual ~LocationData_RelativeKeypoint();

  LocationData_RelativeKeypoint(const LocationData_RelativeKeypoint& from);
  LocationData_RelativeKeypoint(LocationData_RelativeKeypoint&& from) noexcept
    : LocationData_RelativeKeypoint() {
    *this = ::std::move(from);
  }

  inline LocationData_RelativeKeypoint& operator=(const LocationData_RelativeKeypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationData_RelativeKeypoint& operator=(LocationData_RelativeKeypoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationData_RelativeKeypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationData_RelativeKeypoint* internal_default_instance() {
    return reinterpret_cast<const LocationData_RelativeKeypoint*>(
               &_LocationData_RelativeKeypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LocationData_RelativeKeypoint& a, LocationData_RelativeKeypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationData_RelativeKeypoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationData_RelativeKeypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationData_RelativeKeypoint* New() const final {
    return CreateMaybeMessage<LocationData_RelativeKeypoint>(nullptr);
  }

  LocationData_RelativeKeypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationData_RelativeKeypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationData_RelativeKeypoint& from);
  void MergeFrom(const LocationData_RelativeKeypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationData_RelativeKeypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LocationData.RelativeKeypoint";
  }
  protected:
  explicit LocationData_RelativeKeypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointLabelFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kScoreFieldNumber = 4,
  };
  // optional string keypoint_label = 3;
  bool has_keypoint_label() const;
  private:
  bool _internal_has_keypoint_label() const;
  public:
  void clear_keypoint_label();
  const std::string& keypoint_label() const;
  void set_keypoint_label(const std::string& value);
  void set_keypoint_label(std::string&& value);
  void set_keypoint_label(const char* value);
  void set_keypoint_label(const char* value, size_t size);
  std::string* mutable_keypoint_label();
  std::string* release_keypoint_label();
  void set_allocated_keypoint_label(std::string* keypoint_label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_keypoint_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_keypoint_label(
      std::string* keypoint_label);
  private:
  const std::string& _internal_keypoint_label() const;
  void _internal_set_keypoint_label(const std::string& value);
  std::string* _internal_mutable_keypoint_label();
  public:

  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float score = 4;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LocationData.RelativeKeypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoint_label_;
  float x_;
  float y_;
  float score_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LocationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LocationData) */ {
 public:
  inline LocationData() : LocationData(nullptr) {};
  virtual ~LocationData();

  LocationData(const LocationData& from);
  LocationData(LocationData&& from) noexcept
    : LocationData() {
    *this = ::std::move(from);
  }

  inline LocationData& operator=(const LocationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationData& operator=(LocationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationData* internal_default_instance() {
    return reinterpret_cast<const LocationData*>(
               &_LocationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LocationData& a, LocationData& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationData* New() const final {
    return CreateMaybeMessage<LocationData>(nullptr);
  }

  LocationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationData& from);
  void MergeFrom(const LocationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LocationData";
  }
  protected:
  explicit LocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LocationData_BoundingBox BoundingBox;
  typedef LocationData_RelativeBoundingBox RelativeBoundingBox;
  typedef LocationData_BinaryMask BinaryMask;
  typedef LocationData_RelativeKeypoint RelativeKeypoint;

  typedef LocationData_Format Format;
  static constexpr Format GLOBAL =
    LocationData_Format_GLOBAL;
  static constexpr Format BOUNDING_BOX =
    LocationData_Format_BOUNDING_BOX;
  static constexpr Format RELATIVE_BOUNDING_BOX =
    LocationData_Format_RELATIVE_BOUNDING_BOX;
  static constexpr Format MASK =
    LocationData_Format_MASK;
  static inline bool Format_IsValid(int value) {
    return LocationData_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    LocationData_Format_Format_MIN;
  static constexpr Format Format_MAX =
    LocationData_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    LocationData_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return LocationData_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return LocationData_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(const std::string& name,
      Format* value) {
    return LocationData_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeKeypointsFieldNumber = 5,
    kBoundingBoxFieldNumber = 2,
    kRelativeBoundingBoxFieldNumber = 3,
    kMaskFieldNumber = 4,
    kFormatFieldNumber = 1,
  };
  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  int relative_keypoints_size() const;
  private:
  int _internal_relative_keypoints_size() const;
  public:
  void clear_relative_keypoints();
  ::mediapipe::LocationData_RelativeKeypoint* mutable_relative_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LocationData_RelativeKeypoint >*
      mutable_relative_keypoints();
  private:
  const ::mediapipe::LocationData_RelativeKeypoint& _internal_relative_keypoints(int index) const;
  ::mediapipe::LocationData_RelativeKeypoint* _internal_add_relative_keypoints();
  public:
  const ::mediapipe::LocationData_RelativeKeypoint& relative_keypoints(int index) const;
  ::mediapipe::LocationData_RelativeKeypoint* add_relative_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LocationData_RelativeKeypoint >&
      relative_keypoints() const;

  // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
  bool has_bounding_box() const;
  private:
  bool _internal_has_bounding_box() const;
  public:
  void clear_bounding_box();
  const ::mediapipe::LocationData_BoundingBox& bounding_box() const;
  ::mediapipe::LocationData_BoundingBox* release_bounding_box();
  ::mediapipe::LocationData_BoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::mediapipe::LocationData_BoundingBox* bounding_box);
  private:
  const ::mediapipe::LocationData_BoundingBox& _internal_bounding_box() const;
  ::mediapipe::LocationData_BoundingBox* _internal_mutable_bounding_box();
  public:
  void unsafe_arena_set_allocated_bounding_box(
      ::mediapipe::LocationData_BoundingBox* bounding_box);
  ::mediapipe::LocationData_BoundingBox* unsafe_arena_release_bounding_box();

  // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
  bool has_relative_bounding_box() const;
  private:
  bool _internal_has_relative_bounding_box() const;
  public:
  void clear_relative_bounding_box();
  const ::mediapipe::LocationData_RelativeBoundingBox& relative_bounding_box() const;
  ::mediapipe::LocationData_RelativeBoundingBox* release_relative_bounding_box();
  ::mediapipe::LocationData_RelativeBoundingBox* mutable_relative_bounding_box();
  void set_allocated_relative_bounding_box(::mediapipe::LocationData_RelativeBoundingBox* relative_bounding_box);
  private:
  const ::mediapipe::LocationData_RelativeBoundingBox& _internal_relative_bounding_box() const;
  ::mediapipe::LocationData_RelativeBoundingBox* _internal_mutable_relative_bounding_box();
  public:
  void unsafe_arena_set_allocated_relative_bounding_box(
      ::mediapipe::LocationData_RelativeBoundingBox* relative_bounding_box);
  ::mediapipe::LocationData_RelativeBoundingBox* unsafe_arena_release_relative_bounding_box();

  // optional .mediapipe.LocationData.BinaryMask mask = 4;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::mediapipe::LocationData_BinaryMask& mask() const;
  ::mediapipe::LocationData_BinaryMask* release_mask();
  ::mediapipe::LocationData_BinaryMask* mutable_mask();
  void set_allocated_mask(::mediapipe::LocationData_BinaryMask* mask);
  private:
  const ::mediapipe::LocationData_BinaryMask& _internal_mask() const;
  ::mediapipe::LocationData_BinaryMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::mediapipe::LocationData_BinaryMask* mask);
  ::mediapipe::LocationData_BinaryMask* unsafe_arena_release_mask();

  // optional .mediapipe.LocationData.Format format = 1;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::mediapipe::LocationData_Format format() const;
  void set_format(::mediapipe::LocationData_Format value);
  private:
  ::mediapipe::LocationData_Format _internal_format() const;
  void _internal_set_format(::mediapipe::LocationData_Format value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LocationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LocationData_RelativeKeypoint > relative_keypoints_;
  ::mediapipe::LocationData_BoundingBox* bounding_box_;
  ::mediapipe::LocationData_RelativeBoundingBox* relative_bounding_box_;
  ::mediapipe::LocationData_BinaryMask* mask_;
  int format_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Detection_AssociatedDetection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Detection.AssociatedDetection) */ {
 public:
  inline Detection_AssociatedDetection() : Detection_AssociatedDetection(nullptr) {};
  virtual ~Detection_AssociatedDetection();

  Detection_AssociatedDetection(const Detection_AssociatedDetection& from);
  Detection_AssociatedDetection(Detection_AssociatedDetection&& from) noexcept
    : Detection_AssociatedDetection() {
    *this = ::std::move(from);
  }

  inline Detection_AssociatedDetection& operator=(const Detection_AssociatedDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection_AssociatedDetection& operator=(Detection_AssociatedDetection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection_AssociatedDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection_AssociatedDetection* internal_default_instance() {
    return reinterpret_cast<const Detection_AssociatedDetection*>(
               &_Detection_AssociatedDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Detection_AssociatedDetection& a, Detection_AssociatedDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection_AssociatedDetection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection_AssociatedDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection_AssociatedDetection* New() const final {
    return CreateMaybeMessage<Detection_AssociatedDetection>(nullptr);
  }

  Detection_AssociatedDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection_AssociatedDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection_AssociatedDetection& from);
  void MergeFrom(const Detection_AssociatedDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection_AssociatedDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Detection.AssociatedDetection";
  }
  protected:
  explicit Detection_AssociatedDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Detection.AssociatedDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float confidence_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Detection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Detection) */ {
 public:
  inline Detection() : Detection(nullptr) {};
  virtual ~Detection();

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const final {
    return CreateMaybeMessage<Detection>(nullptr);
  }

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Detection";
  }
  protected:
  explicit Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Detection_AssociatedDetection AssociatedDetection;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kLabelIdFieldNumber = 2,
    kScoreFieldNumber = 3,
    kAssociatedDetectionsFieldNumber = 8,
    kDisplayNameFieldNumber = 9,
    kFeatureTagFieldNumber = 5,
    kTrackIdFieldNumber = 6,
    kLocationDataFieldNumber = 4,
    kDetectionIdFieldNumber = 7,
    kTimestampUsecFieldNumber = 10,
  };
  // repeated string label = 1;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  const std::string& label(int index) const;
  std::string* mutable_label(int index);
  void set_label(int index, const std::string& value);
  void set_label(int index, std::string&& value);
  void set_label(int index, const char* value);
  void set_label(int index, const char* value, size_t size);
  std::string* add_label();
  void add_label(const std::string& value);
  void add_label(std::string&& value);
  void add_label(const char* value);
  void add_label(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_label();
  private:
  const std::string& _internal_label(int index) const;
  std::string* _internal_add_label();
  public:

  // repeated int32 label_id = 2 [packed = true];
  int label_id_size() const;
  private:
  int _internal_label_id_size() const;
  public:
  void clear_label_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_label_id() const;
  void _internal_add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_label_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 label_id(int index) const;
  void set_label_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      label_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_label_id();

  // repeated float score = 3 [packed = true];
  int score_size() const;
  private:
  int _internal_score_size() const;
  public:
  void clear_score();
  private:
  float _internal_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_score() const;
  void _internal_add_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_score();
  public:
  float score(int index) const;
  void set_score(int index, float value);
  void add_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score();

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  int associated_detections_size() const;
  private:
  int _internal_associated_detections_size() const;
  public:
  void clear_associated_detections();
  ::mediapipe::Detection_AssociatedDetection* mutable_associated_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >*
      mutable_associated_detections();
  private:
  const ::mediapipe::Detection_AssociatedDetection& _internal_associated_detections(int index) const;
  ::mediapipe::Detection_AssociatedDetection* _internal_add_associated_detections();
  public:
  const ::mediapipe::Detection_AssociatedDetection& associated_detections(int index) const;
  ::mediapipe::Detection_AssociatedDetection* add_associated_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >&
      associated_detections() const;

  // repeated string display_name = 9;
  int display_name_size() const;
  private:
  int _internal_display_name_size() const;
  public:
  void clear_display_name();
  const std::string& display_name(int index) const;
  std::string* mutable_display_name(int index);
  void set_display_name(int index, const std::string& value);
  void set_display_name(int index, std::string&& value);
  void set_display_name(int index, const char* value);
  void set_display_name(int index, const char* value, size_t size);
  std::string* add_display_name();
  void add_display_name(const std::string& value);
  void add_display_name(std::string&& value);
  void add_display_name(const char* value);
  void add_display_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& display_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_display_name();
  private:
  const std::string& _internal_display_name(int index) const;
  std::string* _internal_add_display_name();
  public:

  // optional string feature_tag = 5;
  bool has_feature_tag() const;
  private:
  bool _internal_has_feature_tag() const;
  public:
  void clear_feature_tag();
  const std::string& feature_tag() const;
  void set_feature_tag(const std::string& value);
  void set_feature_tag(std::string&& value);
  void set_feature_tag(const char* value);
  void set_feature_tag(const char* value, size_t size);
  std::string* mutable_feature_tag();
  std::string* release_feature_tag();
  void set_allocated_feature_tag(std::string* feature_tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_feature_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_feature_tag(
      std::string* feature_tag);
  private:
  const std::string& _internal_feature_tag() const;
  void _internal_set_feature_tag(const std::string& value);
  std::string* _internal_mutable_feature_tag();
  public:

  // optional string track_id = 6;
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_track_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_track_id(
      std::string* track_id);
  private:
  const std::string& _internal_track_id() const;
  void _internal_set_track_id(const std::string& value);
  std::string* _internal_mutable_track_id();
  public:

  // optional .mediapipe.LocationData location_data = 4;
  bool has_location_data() const;
  private:
  bool _internal_has_location_data() const;
  public:
  void clear_location_data();
  const ::mediapipe::LocationData& location_data() const;
  ::mediapipe::LocationData* release_location_data();
  ::mediapipe::LocationData* mutable_location_data();
  void set_allocated_location_data(::mediapipe::LocationData* location_data);
  private:
  const ::mediapipe::LocationData& _internal_location_data() const;
  ::mediapipe::LocationData* _internal_mutable_location_data();
  public:
  void unsafe_arena_set_allocated_location_data(
      ::mediapipe::LocationData* location_data);
  ::mediapipe::LocationData* unsafe_arena_release_location_data();

  // optional int64 detection_id = 7;
  bool has_detection_id() const;
  private:
  bool _internal_has_detection_id() const;
  public:
  void clear_detection_id();
  ::PROTOBUF_NAMESPACE_ID::int64 detection_id() const;
  void set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_detection_id() const;
  void _internal_set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timestamp_usec = 10;
  bool has_timestamp_usec() const;
  private:
  bool _internal_has_timestamp_usec() const;
  public:
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Detection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > label_id_;
  mutable std::atomic<int> _label_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_;
  mutable std::atomic<int> _score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection > associated_detections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::mediapipe::LocationData* location_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 detection_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class DetectionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.DetectionList) */ {
 public:
  inline DetectionList() : DetectionList(nullptr) {};
  virtual ~DetectionList();

  DetectionList(const DetectionList& from);
  DetectionList(DetectionList&& from) noexcept
    : DetectionList() {
    *this = ::std::move(from);
  }

  inline DetectionList& operator=(const DetectionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionList& operator=(DetectionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionList* internal_default_instance() {
    return reinterpret_cast<const DetectionList*>(
               &_DetectionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DetectionList& a, DetectionList& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionList* New() const final {
    return CreateMaybeMessage<DetectionList>(nullptr);
  }

  DetectionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionList& from);
  void MergeFrom(const DetectionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.DetectionList";
  }
  protected:
  explicit DetectionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionFieldNumber = 1,
  };
  // repeated .mediapipe.Detection detection = 1;
  int detection_size() const;
  private:
  int _internal_detection_size() const;
  public:
  void clear_detection();
  ::mediapipe::Detection* mutable_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >*
      mutable_detection();
  private:
  const ::mediapipe::Detection& _internal_detection(int index) const;
  ::mediapipe::Detection* _internal_add_detection();
  public:
  const ::mediapipe::Detection& detection(int index) const;
  ::mediapipe::Detection* add_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >&
      detection() const;

  // @@protoc_insertion_point(class_scope:mediapipe.DetectionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection > detection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperHandTracking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperHandTracking) */ {
 public:
  inline WrapperHandTracking() : WrapperHandTracking(nullptr) {};
  virtual ~WrapperHandTracking();

  WrapperHandTracking(const WrapperHandTracking& from);
  WrapperHandTracking(WrapperHandTracking&& from) noexcept
    : WrapperHandTracking() {
    *this = ::std::move(from);
  }

  inline WrapperHandTracking& operator=(const WrapperHandTracking& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperHandTracking& operator=(WrapperHandTracking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperHandTracking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperHandTracking* internal_default_instance() {
    return reinterpret_cast<const WrapperHandTracking*>(
               &_WrapperHandTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WrapperHandTracking& a, WrapperHandTracking& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperHandTracking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperHandTracking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperHandTracking* New() const final {
    return CreateMaybeMessage<WrapperHandTracking>(nullptr);
  }

  WrapperHandTracking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperHandTracking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperHandTracking& from);
  void MergeFrom(const WrapperHandTracking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperHandTracking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperHandTracking";
  }
  protected:
  explicit WrapperHandTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 1,
    kRectFieldNumber = 2,
    kDetectionFieldNumber = 3,
  };
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  bool has_landmarks() const;
  private:
  bool _internal_has_landmarks() const;
  public:
  void clear_landmarks();
  const ::mediapipe::NormalizedLandmarkList& landmarks() const;
  ::mediapipe::NormalizedLandmarkList* release_landmarks();
  ::mediapipe::NormalizedLandmarkList* mutable_landmarks();
  void set_allocated_landmarks(::mediapipe::NormalizedLandmarkList* landmarks);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_landmarks() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_landmarks();
  public:
  void unsafe_arena_set_allocated_landmarks(
      ::mediapipe::NormalizedLandmarkList* landmarks);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_landmarks();

  // optional .mediapipe.NormalizedRect rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::mediapipe::NormalizedRect& rect() const;
  ::mediapipe::NormalizedRect* release_rect();
  ::mediapipe::NormalizedRect* mutable_rect();
  void set_allocated_rect(::mediapipe::NormalizedRect* rect);
  private:
  const ::mediapipe::NormalizedRect& _internal_rect() const;
  ::mediapipe::NormalizedRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::mediapipe::NormalizedRect* rect);
  ::mediapipe::NormalizedRect* unsafe_arena_release_rect();

  // optional .mediapipe.DetectionList detection = 3;
  bool has_detection() const;
  private:
  bool _internal_has_detection() const;
  public:
  void clear_detection();
  const ::mediapipe::DetectionList& detection() const;
  ::mediapipe::DetectionList* release_detection();
  ::mediapipe::DetectionList* mutable_detection();
  void set_allocated_detection(::mediapipe::DetectionList* detection);
  private:
  const ::mediapipe::DetectionList& _internal_detection() const;
  ::mediapipe::DetectionList* _internal_mutable_detection();
  public:
  void unsafe_arena_set_allocated_detection(
      ::mediapipe::DetectionList* detection);
  ::mediapipe::DetectionList* unsafe_arena_release_detection();

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperHandTracking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::NormalizedLandmarkList* landmarks_;
  ::mediapipe::NormalizedRect* rect_;
  ::mediapipe::DetectionList* detection_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperMultiHand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperMultiHand) */ {
 public:
  inline WrapperMultiHand() : WrapperMultiHand(nullptr) {};
  virtual ~WrapperMultiHand();

  WrapperMultiHand(const WrapperMultiHand& from);
  WrapperMultiHand(WrapperMultiHand&& from) noexcept
    : WrapperMultiHand() {
    *this = ::std::move(from);
  }

  inline WrapperMultiHand& operator=(const WrapperMultiHand& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperMultiHand& operator=(WrapperMultiHand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperMultiHand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperMultiHand* internal_default_instance() {
    return reinterpret_cast<const WrapperMultiHand*>(
               &_WrapperMultiHand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WrapperMultiHand& a, WrapperMultiHand& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperMultiHand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperMultiHand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperMultiHand* New() const final {
    return CreateMaybeMessage<WrapperMultiHand>(nullptr);
  }

  WrapperMultiHand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperMultiHand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperMultiHand& from);
  void MergeFrom(const WrapperMultiHand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperMultiHand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperMultiHand";
  }
  protected:
  explicit WrapperMultiHand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkgroupFieldNumber = 1,
    kRectFieldNumber = 2,
    kDetectionFieldNumber = 3,
    kFrameIdFieldNumber = 4,
  };
  // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
  bool has_landmarkgroup() const;
  private:
  bool _internal_has_landmarkgroup() const;
  public:
  void clear_landmarkgroup();
  const ::mediapipe::NormalizedLandmarkGroup& landmarkgroup() const;
  ::mediapipe::NormalizedLandmarkGroup* release_landmarkgroup();
  ::mediapipe::NormalizedLandmarkGroup* mutable_landmarkgroup();
  void set_allocated_landmarkgroup(::mediapipe::NormalizedLandmarkGroup* landmarkgroup);
  private:
  const ::mediapipe::NormalizedLandmarkGroup& _internal_landmarkgroup() const;
  ::mediapipe::NormalizedLandmarkGroup* _internal_mutable_landmarkgroup();
  public:
  void unsafe_arena_set_allocated_landmarkgroup(
      ::mediapipe::NormalizedLandmarkGroup* landmarkgroup);
  ::mediapipe::NormalizedLandmarkGroup* unsafe_arena_release_landmarkgroup();

  // optional .mediapipe.NormalizedRect rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::mediapipe::NormalizedRect& rect() const;
  ::mediapipe::NormalizedRect* release_rect();
  ::mediapipe::NormalizedRect* mutable_rect();
  void set_allocated_rect(::mediapipe::NormalizedRect* rect);
  private:
  const ::mediapipe::NormalizedRect& _internal_rect() const;
  ::mediapipe::NormalizedRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::mediapipe::NormalizedRect* rect);
  ::mediapipe::NormalizedRect* unsafe_arena_release_rect();

  // optional .mediapipe.DetectionList detection = 3;
  bool has_detection() const;
  private:
  bool _internal_has_detection() const;
  public:
  void clear_detection();
  const ::mediapipe::DetectionList& detection() const;
  ::mediapipe::DetectionList* release_detection();
  ::mediapipe::DetectionList* mutable_detection();
  void set_allocated_detection(::mediapipe::DetectionList* detection);
  private:
  const ::mediapipe::DetectionList& _internal_detection() const;
  ::mediapipe::DetectionList* _internal_mutable_detection();
  public:
  void unsafe_arena_set_allocated_detection(
      ::mediapipe::DetectionList* detection);
  ::mediapipe::DetectionList* unsafe_arena_release_detection();

  // optional int64 frame_id = 4;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperMultiHand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::NormalizedLandmarkGroup* landmarkgroup_;
  ::mediapipe::NormalizedRect* rect_;
  ::mediapipe::DetectionList* detection_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperIris PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperIris) */ {
 public:
  inline WrapperIris() : WrapperIris(nullptr) {};
  virtual ~WrapperIris();

  WrapperIris(const WrapperIris& from);
  WrapperIris(WrapperIris&& from) noexcept
    : WrapperIris() {
    *this = ::std::move(from);
  }

  inline WrapperIris& operator=(const WrapperIris& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperIris& operator=(WrapperIris&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperIris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperIris* internal_default_instance() {
    return reinterpret_cast<const WrapperIris*>(
               &_WrapperIris_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WrapperIris& a, WrapperIris& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperIris* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperIris* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperIris* New() const final {
    return CreateMaybeMessage<WrapperIris>(nullptr);
  }

  WrapperIris* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperIris>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperIris& from);
  void MergeFrom(const WrapperIris& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperIris* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperIris";
  }
  protected:
  explicit WrapperIris(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEyeLandmarksLeftFieldNumber = 1,
    kEyeLandmarksRightFieldNumber = 2,
    kIrisLandmarksLeftFieldNumber = 3,
    kIrisLandmarksRightFieldNumber = 4,
    kRectFieldNumber = 5,
    kDetectionFieldNumber = 6,
    kFrameIdFieldNumber = 7,
  };
  // optional .mediapipe.NormalizedLandmarkList eye_landmarks_left = 1;
  bool has_eye_landmarks_left() const;
  private:
  bool _internal_has_eye_landmarks_left() const;
  public:
  void clear_eye_landmarks_left();
  const ::mediapipe::NormalizedLandmarkList& eye_landmarks_left() const;
  ::mediapipe::NormalizedLandmarkList* release_eye_landmarks_left();
  ::mediapipe::NormalizedLandmarkList* mutable_eye_landmarks_left();
  void set_allocated_eye_landmarks_left(::mediapipe::NormalizedLandmarkList* eye_landmarks_left);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_eye_landmarks_left() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_eye_landmarks_left();
  public:
  void unsafe_arena_set_allocated_eye_landmarks_left(
      ::mediapipe::NormalizedLandmarkList* eye_landmarks_left);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_eye_landmarks_left();

  // optional .mediapipe.NormalizedLandmarkList eye_landmarks_right = 2;
  bool has_eye_landmarks_right() const;
  private:
  bool _internal_has_eye_landmarks_right() const;
  public:
  void clear_eye_landmarks_right();
  const ::mediapipe::NormalizedLandmarkList& eye_landmarks_right() const;
  ::mediapipe::NormalizedLandmarkList* release_eye_landmarks_right();
  ::mediapipe::NormalizedLandmarkList* mutable_eye_landmarks_right();
  void set_allocated_eye_landmarks_right(::mediapipe::NormalizedLandmarkList* eye_landmarks_right);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_eye_landmarks_right() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_eye_landmarks_right();
  public:
  void unsafe_arena_set_allocated_eye_landmarks_right(
      ::mediapipe::NormalizedLandmarkList* eye_landmarks_right);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_eye_landmarks_right();

  // optional .mediapipe.NormalizedLandmarkList iris_landmarks_left = 3;
  bool has_iris_landmarks_left() const;
  private:
  bool _internal_has_iris_landmarks_left() const;
  public:
  void clear_iris_landmarks_left();
  const ::mediapipe::NormalizedLandmarkList& iris_landmarks_left() const;
  ::mediapipe::NormalizedLandmarkList* release_iris_landmarks_left();
  ::mediapipe::NormalizedLandmarkList* mutable_iris_landmarks_left();
  void set_allocated_iris_landmarks_left(::mediapipe::NormalizedLandmarkList* iris_landmarks_left);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_iris_landmarks_left() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_iris_landmarks_left();
  public:
  void unsafe_arena_set_allocated_iris_landmarks_left(
      ::mediapipe::NormalizedLandmarkList* iris_landmarks_left);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_iris_landmarks_left();

  // optional .mediapipe.NormalizedLandmarkList iris_landmarks_right = 4;
  bool has_iris_landmarks_right() const;
  private:
  bool _internal_has_iris_landmarks_right() const;
  public:
  void clear_iris_landmarks_right();
  const ::mediapipe::NormalizedLandmarkList& iris_landmarks_right() const;
  ::mediapipe::NormalizedLandmarkList* release_iris_landmarks_right();
  ::mediapipe::NormalizedLandmarkList* mutable_iris_landmarks_right();
  void set_allocated_iris_landmarks_right(::mediapipe::NormalizedLandmarkList* iris_landmarks_right);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_iris_landmarks_right() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_iris_landmarks_right();
  public:
  void unsafe_arena_set_allocated_iris_landmarks_right(
      ::mediapipe::NormalizedLandmarkList* iris_landmarks_right);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_iris_landmarks_right();

  // optional .mediapipe.NormalizedRect rect = 5;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::mediapipe::NormalizedRect& rect() const;
  ::mediapipe::NormalizedRect* release_rect();
  ::mediapipe::NormalizedRect* mutable_rect();
  void set_allocated_rect(::mediapipe::NormalizedRect* rect);
  private:
  const ::mediapipe::NormalizedRect& _internal_rect() const;
  ::mediapipe::NormalizedRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::mediapipe::NormalizedRect* rect);
  ::mediapipe::NormalizedRect* unsafe_arena_release_rect();

  // optional .mediapipe.DetectionList detection = 6;
  bool has_detection() const;
  private:
  bool _internal_has_detection() const;
  public:
  void clear_detection();
  const ::mediapipe::DetectionList& detection() const;
  ::mediapipe::DetectionList* release_detection();
  ::mediapipe::DetectionList* mutable_detection();
  void set_allocated_detection(::mediapipe::DetectionList* detection);
  private:
  const ::mediapipe::DetectionList& _internal_detection() const;
  ::mediapipe::DetectionList* _internal_mutable_detection();
  public:
  void unsafe_arena_set_allocated_detection(
      ::mediapipe::DetectionList* detection);
  ::mediapipe::DetectionList* unsafe_arena_release_detection();

  // optional int64 frame_id = 7;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperIris)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::NormalizedLandmarkList* eye_landmarks_left_;
  ::mediapipe::NormalizedLandmarkList* eye_landmarks_right_;
  ::mediapipe::NormalizedLandmarkList* iris_landmarks_left_;
  ::mediapipe::NormalizedLandmarkList* iris_landmarks_right_;
  ::mediapipe::NormalizedRect* rect_;
  ::mediapipe::DetectionList* detection_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperFaceMesh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperFaceMesh) */ {
 public:
  inline WrapperFaceMesh() : WrapperFaceMesh(nullptr) {};
  virtual ~WrapperFaceMesh();

  WrapperFaceMesh(const WrapperFaceMesh& from);
  WrapperFaceMesh(WrapperFaceMesh&& from) noexcept
    : WrapperFaceMesh() {
    *this = ::std::move(from);
  }

  inline WrapperFaceMesh& operator=(const WrapperFaceMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperFaceMesh& operator=(WrapperFaceMesh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperFaceMesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperFaceMesh* internal_default_instance() {
    return reinterpret_cast<const WrapperFaceMesh*>(
               &_WrapperFaceMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WrapperFaceMesh& a, WrapperFaceMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperFaceMesh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperFaceMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperFaceMesh* New() const final {
    return CreateMaybeMessage<WrapperFaceMesh>(nullptr);
  }

  WrapperFaceMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperFaceMesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperFaceMesh& from);
  void MergeFrom(const WrapperFaceMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperFaceMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperFaceMesh";
  }
  protected:
  explicit WrapperFaceMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkgroupFieldNumber = 1,
    kRectFieldNumber = 2,
    kDetectionFieldNumber = 3,
    kFrameIdFieldNumber = 4,
  };
  // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
  bool has_landmarkgroup() const;
  private:
  bool _internal_has_landmarkgroup() const;
  public:
  void clear_landmarkgroup();
  const ::mediapipe::NormalizedLandmarkGroup& landmarkgroup() const;
  ::mediapipe::NormalizedLandmarkGroup* release_landmarkgroup();
  ::mediapipe::NormalizedLandmarkGroup* mutable_landmarkgroup();
  void set_allocated_landmarkgroup(::mediapipe::NormalizedLandmarkGroup* landmarkgroup);
  private:
  const ::mediapipe::NormalizedLandmarkGroup& _internal_landmarkgroup() const;
  ::mediapipe::NormalizedLandmarkGroup* _internal_mutable_landmarkgroup();
  public:
  void unsafe_arena_set_allocated_landmarkgroup(
      ::mediapipe::NormalizedLandmarkGroup* landmarkgroup);
  ::mediapipe::NormalizedLandmarkGroup* unsafe_arena_release_landmarkgroup();

  // optional .mediapipe.NormalizedRect rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::mediapipe::NormalizedRect& rect() const;
  ::mediapipe::NormalizedRect* release_rect();
  ::mediapipe::NormalizedRect* mutable_rect();
  void set_allocated_rect(::mediapipe::NormalizedRect* rect);
  private:
  const ::mediapipe::NormalizedRect& _internal_rect() const;
  ::mediapipe::NormalizedRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::mediapipe::NormalizedRect* rect);
  ::mediapipe::NormalizedRect* unsafe_arena_release_rect();

  // optional .mediapipe.DetectionList detection = 3;
  bool has_detection() const;
  private:
  bool _internal_has_detection() const;
  public:
  void clear_detection();
  const ::mediapipe::DetectionList& detection() const;
  ::mediapipe::DetectionList* release_detection();
  ::mediapipe::DetectionList* mutable_detection();
  void set_allocated_detection(::mediapipe::DetectionList* detection);
  private:
  const ::mediapipe::DetectionList& _internal_detection() const;
  ::mediapipe::DetectionList* _internal_mutable_detection();
  public:
  void unsafe_arena_set_allocated_detection(
      ::mediapipe::DetectionList* detection);
  ::mediapipe::DetectionList* unsafe_arena_release_detection();

  // optional int64 frame_id = 4;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperFaceMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::NormalizedLandmarkGroup* landmarkgroup_;
  ::mediapipe::NormalizedRect* rect_;
  ::mediapipe::DetectionList* detection_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperUpperBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperUpperBody) */ {
 public:
  inline WrapperUpperBody() : WrapperUpperBody(nullptr) {};
  virtual ~WrapperUpperBody();

  WrapperUpperBody(const WrapperUpperBody& from);
  WrapperUpperBody(WrapperUpperBody&& from) noexcept
    : WrapperUpperBody() {
    *this = ::std::move(from);
  }

  inline WrapperUpperBody& operator=(const WrapperUpperBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperUpperBody& operator=(WrapperUpperBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperUpperBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperUpperBody* internal_default_instance() {
    return reinterpret_cast<const WrapperUpperBody*>(
               &_WrapperUpperBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WrapperUpperBody& a, WrapperUpperBody& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperUpperBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperUpperBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperUpperBody* New() const final {
    return CreateMaybeMessage<WrapperUpperBody>(nullptr);
  }

  WrapperUpperBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperUpperBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperUpperBody& from);
  void MergeFrom(const WrapperUpperBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperUpperBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperUpperBody";
  }
  protected:
  explicit WrapperUpperBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 1,
    kRectFieldNumber = 2,
    kDetectionFieldNumber = 3,
    kFrameIdFieldNumber = 4,
  };
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  bool has_landmarks() const;
  private:
  bool _internal_has_landmarks() const;
  public:
  void clear_landmarks();
  const ::mediapipe::NormalizedLandmarkList& landmarks() const;
  ::mediapipe::NormalizedLandmarkList* release_landmarks();
  ::mediapipe::NormalizedLandmarkList* mutable_landmarks();
  void set_allocated_landmarks(::mediapipe::NormalizedLandmarkList* landmarks);
  private:
  const ::mediapipe::NormalizedLandmarkList& _internal_landmarks() const;
  ::mediapipe::NormalizedLandmarkList* _internal_mutable_landmarks();
  public:
  void unsafe_arena_set_allocated_landmarks(
      ::mediapipe::NormalizedLandmarkList* landmarks);
  ::mediapipe::NormalizedLandmarkList* unsafe_arena_release_landmarks();

  // optional .mediapipe.NormalizedRect rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::mediapipe::NormalizedRect& rect() const;
  ::mediapipe::NormalizedRect* release_rect();
  ::mediapipe::NormalizedRect* mutable_rect();
  void set_allocated_rect(::mediapipe::NormalizedRect* rect);
  private:
  const ::mediapipe::NormalizedRect& _internal_rect() const;
  ::mediapipe::NormalizedRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::mediapipe::NormalizedRect* rect);
  ::mediapipe::NormalizedRect* unsafe_arena_release_rect();

  // optional .mediapipe.DetectionList detection = 3;
  bool has_detection() const;
  private:
  bool _internal_has_detection() const;
  public:
  void clear_detection();
  const ::mediapipe::DetectionList& detection() const;
  ::mediapipe::DetectionList* release_detection();
  ::mediapipe::DetectionList* mutable_detection();
  void set_allocated_detection(::mediapipe::DetectionList* detection);
  private:
  const ::mediapipe::DetectionList& _internal_detection() const;
  ::mediapipe::DetectionList* _internal_mutable_detection();
  public:
  void unsafe_arena_set_allocated_detection(
      ::mediapipe::DetectionList* detection);
  ::mediapipe::DetectionList* unsafe_arena_release_detection();

  // optional int64 frame_id = 4;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperUpperBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::NormalizedLandmarkList* landmarks_;
  ::mediapipe::NormalizedRect* rect_;
  ::mediapipe::DetectionList* detection_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WrapperObjectTracking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.WrapperObjectTracking) */ {
 public:
  inline WrapperObjectTracking() : WrapperObjectTracking(nullptr) {};
  virtual ~WrapperObjectTracking();

  WrapperObjectTracking(const WrapperObjectTracking& from);
  WrapperObjectTracking(WrapperObjectTracking&& from) noexcept
    : WrapperObjectTracking() {
    *this = ::std::move(from);
  }

  inline WrapperObjectTracking& operator=(const WrapperObjectTracking& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperObjectTracking& operator=(WrapperObjectTracking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperObjectTracking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperObjectTracking* internal_default_instance() {
    return reinterpret_cast<const WrapperObjectTracking*>(
               &_WrapperObjectTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WrapperObjectTracking& a, WrapperObjectTracking& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperObjectTracking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperObjectTracking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperObjectTracking* New() const final {
    return CreateMaybeMessage<WrapperObjectTracking>(nullptr);
  }

  WrapperObjectTracking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperObjectTracking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperObjectTracking& from);
  void MergeFrom(const WrapperObjectTracking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperObjectTracking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.WrapperObjectTracking";
  }
  protected:
  explicit WrapperObjectTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wrapper_5fmodel_2eproto);
    return ::descriptor_table_wrapper_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // optional .mediapipe.DetectionList detections = 1;
  bool has_detections() const;
  private:
  bool _internal_has_detections() const;
  public:
  void clear_detections();
  const ::mediapipe::DetectionList& detections() const;
  ::mediapipe::DetectionList* release_detections();
  ::mediapipe::DetectionList* mutable_detections();
  void set_allocated_detections(::mediapipe::DetectionList* detections);
  private:
  const ::mediapipe::DetectionList& _internal_detections() const;
  ::mediapipe::DetectionList* _internal_mutable_detections();
  public:
  void unsafe_arena_set_allocated_detections(
      ::mediapipe::DetectionList* detections);
  ::mediapipe::DetectionList* unsafe_arena_release_detections();

  // optional int64 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.WrapperObjectTracking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::DetectionList* detections_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  friend struct ::TableStruct_wrapper_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// optional float x = 1;
inline bool Landmark::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Landmark::has_x() const {
  return _internal_has_x();
}
inline void Landmark::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Landmark::_internal_x() const {
  return x_;
}
inline float Landmark::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.x)
  return _internal_x();
}
inline void Landmark::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Landmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.x)
}

// optional float y = 2;
inline bool Landmark::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Landmark::has_y() const {
  return _internal_has_y();
}
inline void Landmark::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Landmark::_internal_y() const {
  return y_;
}
inline float Landmark::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.y)
  return _internal_y();
}
inline void Landmark::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Landmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.y)
}

// optional float z = 3;
inline bool Landmark::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Landmark::has_z() const {
  return _internal_has_z();
}
inline void Landmark::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Landmark::_internal_z() const {
  return z_;
}
inline float Landmark::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.z)
  return _internal_z();
}
inline void Landmark::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Landmark::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.z)
}

// -------------------------------------------------------------------

// LandmarkList

// repeated .mediapipe.Landmark landmark = 1;
inline int LandmarkList::_internal_landmark_size() const {
  return landmark_.size();
}
inline int LandmarkList::landmark_size() const {
  return _internal_landmark_size();
}
inline void LandmarkList::clear_landmark() {
  landmark_.Clear();
}
inline ::mediapipe::Landmark* LandmarkList::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.LandmarkList.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >*
LandmarkList::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.LandmarkList.landmark)
  return &landmark_;
}
inline const ::mediapipe::Landmark& LandmarkList::_internal_landmark(int index) const {
  return landmark_.Get(index);
}
inline const ::mediapipe::Landmark& LandmarkList::landmark(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarkList.landmark)
  return _internal_landmark(index);
}
inline ::mediapipe::Landmark* LandmarkList::_internal_add_landmark() {
  return landmark_.Add();
}
inline ::mediapipe::Landmark* LandmarkList::add_landmark() {
  // @@protoc_insertion_point(field_add:mediapipe.LandmarkList.landmark)
  return _internal_add_landmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >&
LandmarkList::landmark() const {
  // @@protoc_insertion_point(field_list:mediapipe.LandmarkList.landmark)
  return landmark_;
}

// -------------------------------------------------------------------

// NormalizedLandmark

// optional float x = 1;
inline bool NormalizedLandmark::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_x() const {
  return _internal_has_x();
}
inline void NormalizedLandmark::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedLandmark::_internal_x() const {
  return x_;
}
inline float NormalizedLandmark::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.x)
  return _internal_x();
}
inline void NormalizedLandmark::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void NormalizedLandmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.x)
}

// optional float y = 2;
inline bool NormalizedLandmark::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_y() const {
  return _internal_has_y();
}
inline void NormalizedLandmark::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedLandmark::_internal_y() const {
  return y_;
}
inline float NormalizedLandmark::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.y)
  return _internal_y();
}
inline void NormalizedLandmark::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void NormalizedLandmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.y)
}

// optional float z = 3;
inline bool NormalizedLandmark::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_z() const {
  return _internal_has_z();
}
inline void NormalizedLandmark::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedLandmark::_internal_z() const {
  return z_;
}
inline float NormalizedLandmark::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.z)
  return _internal_z();
}
inline void NormalizedLandmark::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void NormalizedLandmark::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.z)
}

// -------------------------------------------------------------------

// NormalizedLandmarkList

// repeated .mediapipe.NormalizedLandmark landmark = 1;
inline int NormalizedLandmarkList::_internal_landmark_size() const {
  return landmark_.size();
}
inline int NormalizedLandmarkList::landmark_size() const {
  return _internal_landmark_size();
}
inline void NormalizedLandmarkList::clear_landmark() {
  landmark_.Clear();
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.NormalizedLandmarkList.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >*
NormalizedLandmarkList::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.NormalizedLandmarkList.landmark)
  return &landmark_;
}
inline const ::mediapipe::NormalizedLandmark& NormalizedLandmarkList::_internal_landmark(int index) const {
  return landmark_.Get(index);
}
inline const ::mediapipe::NormalizedLandmark& NormalizedLandmarkList::landmark(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmarkList.landmark)
  return _internal_landmark(index);
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::_internal_add_landmark() {
  return landmark_.Add();
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::add_landmark() {
  // @@protoc_insertion_point(field_add:mediapipe.NormalizedLandmarkList.landmark)
  return _internal_add_landmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >&
NormalizedLandmarkList::landmark() const {
  // @@protoc_insertion_point(field_list:mediapipe.NormalizedLandmarkList.landmark)
  return landmark_;
}

// -------------------------------------------------------------------

// NormalizedLandmarkGroup

// repeated .mediapipe.NormalizedLandmarkList landmarklist = 1;
inline int NormalizedLandmarkGroup::_internal_landmarklist_size() const {
  return landmarklist_.size();
}
inline int NormalizedLandmarkGroup::landmarklist_size() const {
  return _internal_landmarklist_size();
}
inline void NormalizedLandmarkGroup::clear_landmarklist() {
  landmarklist_.Clear();
}
inline ::mediapipe::NormalizedLandmarkList* NormalizedLandmarkGroup::mutable_landmarklist(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.NormalizedLandmarkGroup.landmarklist)
  return landmarklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmarkList >*
NormalizedLandmarkGroup::mutable_landmarklist() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.NormalizedLandmarkGroup.landmarklist)
  return &landmarklist_;
}
inline const ::mediapipe::NormalizedLandmarkList& NormalizedLandmarkGroup::_internal_landmarklist(int index) const {
  return landmarklist_.Get(index);
}
inline const ::mediapipe::NormalizedLandmarkList& NormalizedLandmarkGroup::landmarklist(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmarkGroup.landmarklist)
  return _internal_landmarklist(index);
}
inline ::mediapipe::NormalizedLandmarkList* NormalizedLandmarkGroup::_internal_add_landmarklist() {
  return landmarklist_.Add();
}
inline ::mediapipe::NormalizedLandmarkList* NormalizedLandmarkGroup::add_landmarklist() {
  // @@protoc_insertion_point(field_add:mediapipe.NormalizedLandmarkGroup.landmarklist)
  return _internal_add_landmarklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmarkList >&
NormalizedLandmarkGroup::landmarklist() const {
  // @@protoc_insertion_point(field_list:mediapipe.NormalizedLandmarkGroup.landmarklist)
  return landmarklist_;
}

// -------------------------------------------------------------------

// Rect

// required int32 x_center = 1;
inline bool Rect::_internal_has_x_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rect::has_x_center() const {
  return _internal_has_x_center();
}
inline void Rect::clear_x_center() {
  x_center_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_x_center() const {
  return x_center_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::x_center() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.x_center)
  return _internal_x_center();
}
inline void Rect::_internal_set_x_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_center_ = value;
}
inline void Rect::set_x_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x_center(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.x_center)
}

// required int32 y_center = 2;
inline bool Rect::_internal_has_y_center() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rect::has_y_center() const {
  return _internal_has_y_center();
}
inline void Rect::clear_y_center() {
  y_center_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_y_center() const {
  return y_center_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::y_center() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.y_center)
  return _internal_y_center();
}
inline void Rect::_internal_set_y_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_center_ = value;
}
inline void Rect::set_y_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y_center(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.y_center)
}

// required int32 height = 3;
inline bool Rect::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rect::has_height() const {
  return _internal_has_height();
}
inline void Rect::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.height)
  return _internal_height();
}
inline void Rect::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void Rect::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.height)
}

// required int32 width = 4;
inline bool Rect::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rect::has_width() const {
  return _internal_has_width();
}
inline void Rect::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.width)
  return _internal_width();
}
inline void Rect::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Rect::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.width)
}

// optional float rotation = 5 [default = 0];
inline bool Rect::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Rect::has_rotation() const {
  return _internal_has_rotation();
}
inline void Rect::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Rect::_internal_rotation() const {
  return rotation_;
}
inline float Rect::rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.rotation)
  return _internal_rotation();
}
inline void Rect::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000020u;
  rotation_ = value;
}
inline void Rect::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.rotation)
}

// optional int64 rect_id = 6;
inline bool Rect::_internal_has_rect_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Rect::has_rect_id() const {
  return _internal_has_rect_id();
}
inline void Rect::clear_rect_id() {
  rect_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Rect::_internal_rect_id() const {
  return rect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Rect::rect_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rect.rect_id)
  return _internal_rect_id();
}
inline void Rect::_internal_set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  rect_id_ = value;
}
inline void Rect::set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rect_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rect.rect_id)
}

// -------------------------------------------------------------------

// NormalizedRect

// required float x_center = 1;
inline bool NormalizedRect::_internal_has_x_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalizedRect::has_x_center() const {
  return _internal_has_x_center();
}
inline void NormalizedRect::clear_x_center() {
  x_center_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedRect::_internal_x_center() const {
  return x_center_;
}
inline float NormalizedRect::x_center() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.x_center)
  return _internal_x_center();
}
inline void NormalizedRect::_internal_set_x_center(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_center_ = value;
}
inline void NormalizedRect::set_x_center(float value) {
  _internal_set_x_center(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.x_center)
}

// required float y_center = 2;
inline bool NormalizedRect::_internal_has_y_center() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizedRect::has_y_center() const {
  return _internal_has_y_center();
}
inline void NormalizedRect::clear_y_center() {
  y_center_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedRect::_internal_y_center() const {
  return y_center_;
}
inline float NormalizedRect::y_center() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.y_center)
  return _internal_y_center();
}
inline void NormalizedRect::_internal_set_y_center(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_center_ = value;
}
inline void NormalizedRect::set_y_center(float value) {
  _internal_set_y_center(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.y_center)
}

// required float height = 3;
inline bool NormalizedRect::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizedRect::has_height() const {
  return _internal_has_height();
}
inline void NormalizedRect::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedRect::_internal_height() const {
  return height_;
}
inline float NormalizedRect::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.height)
  return _internal_height();
}
inline void NormalizedRect::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void NormalizedRect::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.height)
}

// required float width = 4;
inline bool NormalizedRect::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizedRect::has_width() const {
  return _internal_has_width();
}
inline void NormalizedRect::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NormalizedRect::_internal_width() const {
  return width_;
}
inline float NormalizedRect::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.width)
  return _internal_width();
}
inline void NormalizedRect::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void NormalizedRect::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.width)
}

// optional float rotation = 5 [default = 0];
inline bool NormalizedRect::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NormalizedRect::has_rotation() const {
  return _internal_has_rotation();
}
inline void NormalizedRect::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float NormalizedRect::_internal_rotation() const {
  return rotation_;
}
inline float NormalizedRect::rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.rotation)
  return _internal_rotation();
}
inline void NormalizedRect::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000020u;
  rotation_ = value;
}
inline void NormalizedRect::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.rotation)
}

// optional int64 rect_id = 6;
inline bool NormalizedRect::_internal_has_rect_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NormalizedRect::has_rect_id() const {
  return _internal_has_rect_id();
}
inline void NormalizedRect::clear_rect_id() {
  rect_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NormalizedRect::_internal_rect_id() const {
  return rect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NormalizedRect::rect_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedRect.rect_id)
  return _internal_rect_id();
}
inline void NormalizedRect::_internal_set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  rect_id_ = value;
}
inline void NormalizedRect::set_rect_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rect_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedRect.rect_id)
}

// -------------------------------------------------------------------

// Rasterization_Interval

// required int32 y = 1;
inline bool Rasterization_Interval::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rasterization_Interval::has_y() const {
  return _internal_has_y();
}
inline void Rasterization_Interval::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rasterization.Interval.y)
  return _internal_y();
}
inline void Rasterization_Interval::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  y_ = value;
}
inline void Rasterization_Interval::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rasterization.Interval.y)
}

// required int32 left_x = 2;
inline bool Rasterization_Interval::_internal_has_left_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rasterization_Interval::has_left_x() const {
  return _internal_has_left_x();
}
inline void Rasterization_Interval::clear_left_x() {
  left_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::_internal_left_x() const {
  return left_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::left_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rasterization.Interval.left_x)
  return _internal_left_x();
}
inline void Rasterization_Interval::_internal_set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  left_x_ = value;
}
inline void Rasterization_Interval::set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rasterization.Interval.left_x)
}

// required int32 right_x = 3;
inline bool Rasterization_Interval::_internal_has_right_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rasterization_Interval::has_right_x() const {
  return _internal_has_right_x();
}
inline void Rasterization_Interval::clear_right_x() {
  right_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::_internal_right_x() const {
  return right_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rasterization_Interval::right_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.Rasterization.Interval.right_x)
  return _internal_right_x();
}
inline void Rasterization_Interval::_internal_set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  right_x_ = value;
}
inline void Rasterization_Interval::set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.Rasterization.Interval.right_x)
}

// -------------------------------------------------------------------

// Rasterization

// repeated .mediapipe.Rasterization.Interval interval = 1;
inline int Rasterization::_internal_interval_size() const {
  return interval_.size();
}
inline int Rasterization::interval_size() const {
  return _internal_interval_size();
}
inline void Rasterization::clear_interval() {
  interval_.Clear();
}
inline ::mediapipe::Rasterization_Interval* Rasterization::mutable_interval(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Rasterization.interval)
  return interval_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Rasterization_Interval >*
Rasterization::mutable_interval() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Rasterization.interval)
  return &interval_;
}
inline const ::mediapipe::Rasterization_Interval& Rasterization::_internal_interval(int index) const {
  return interval_.Get(index);
}
inline const ::mediapipe::Rasterization_Interval& Rasterization::interval(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Rasterization.interval)
  return _internal_interval(index);
}
inline ::mediapipe::Rasterization_Interval* Rasterization::_internal_add_interval() {
  return interval_.Add();
}
inline ::mediapipe::Rasterization_Interval* Rasterization::add_interval() {
  // @@protoc_insertion_point(field_add:mediapipe.Rasterization.interval)
  return _internal_add_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Rasterization_Interval >&
Rasterization::interval() const {
  // @@protoc_insertion_point(field_list:mediapipe.Rasterization.interval)
  return interval_;
}

// -------------------------------------------------------------------

// LocationData_BoundingBox

// optional int32 xmin = 1;
inline bool LocationData_BoundingBox::_internal_has_xmin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocationData_BoundingBox::has_xmin() const {
  return _internal_has_xmin();
}
inline void LocationData_BoundingBox::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::_internal_xmin() const {
  return xmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::xmin() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BoundingBox.xmin)
  return _internal_xmin();
}
inline void LocationData_BoundingBox::_internal_set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
}
inline void LocationData_BoundingBox::set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BoundingBox.xmin)
}

// optional int32 ymin = 2;
inline bool LocationData_BoundingBox::_internal_has_ymin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocationData_BoundingBox::has_ymin() const {
  return _internal_has_ymin();
}
inline void LocationData_BoundingBox::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::_internal_ymin() const {
  return ymin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::ymin() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BoundingBox.ymin)
  return _internal_ymin();
}
inline void LocationData_BoundingBox::_internal_set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
}
inline void LocationData_BoundingBox::set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BoundingBox.ymin)
}

// optional int32 width = 3;
inline bool LocationData_BoundingBox::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocationData_BoundingBox::has_width() const {
  return _internal_has_width();
}
inline void LocationData_BoundingBox::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BoundingBox.width)
  return _internal_width();
}
inline void LocationData_BoundingBox::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void LocationData_BoundingBox::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BoundingBox.width)
}

// optional int32 height = 4;
inline bool LocationData_BoundingBox::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocationData_BoundingBox::has_height() const {
  return _internal_has_height();
}
inline void LocationData_BoundingBox::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BoundingBox.height)
  return _internal_height();
}
inline void LocationData_BoundingBox::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void LocationData_BoundingBox::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BoundingBox.height)
}

// -------------------------------------------------------------------

// LocationData_RelativeBoundingBox

// optional float xmin = 1;
inline bool LocationData_RelativeBoundingBox::_internal_has_xmin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocationData_RelativeBoundingBox::has_xmin() const {
  return _internal_has_xmin();
}
inline void LocationData_RelativeBoundingBox::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float LocationData_RelativeBoundingBox::_internal_xmin() const {
  return xmin_;
}
inline float LocationData_RelativeBoundingBox::xmin() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeBoundingBox.xmin)
  return _internal_xmin();
}
inline void LocationData_RelativeBoundingBox::_internal_set_xmin(float value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
}
inline void LocationData_RelativeBoundingBox::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeBoundingBox.xmin)
}

// optional float ymin = 2;
inline bool LocationData_RelativeBoundingBox::_internal_has_ymin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocationData_RelativeBoundingBox::has_ymin() const {
  return _internal_has_ymin();
}
inline void LocationData_RelativeBoundingBox::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LocationData_RelativeBoundingBox::_internal_ymin() const {
  return ymin_;
}
inline float LocationData_RelativeBoundingBox::ymin() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeBoundingBox.ymin)
  return _internal_ymin();
}
inline void LocationData_RelativeBoundingBox::_internal_set_ymin(float value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
}
inline void LocationData_RelativeBoundingBox::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeBoundingBox.ymin)
}

// optional float width = 3;
inline bool LocationData_RelativeBoundingBox::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocationData_RelativeBoundingBox::has_width() const {
  return _internal_has_width();
}
inline void LocationData_RelativeBoundingBox::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LocationData_RelativeBoundingBox::_internal_width() const {
  return width_;
}
inline float LocationData_RelativeBoundingBox::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeBoundingBox.width)
  return _internal_width();
}
inline void LocationData_RelativeBoundingBox::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void LocationData_RelativeBoundingBox::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeBoundingBox.width)
}

// optional float height = 4;
inline bool LocationData_RelativeBoundingBox::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocationData_RelativeBoundingBox::has_height() const {
  return _internal_has_height();
}
inline void LocationData_RelativeBoundingBox::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LocationData_RelativeBoundingBox::_internal_height() const {
  return height_;
}
inline float LocationData_RelativeBoundingBox::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeBoundingBox.height)
  return _internal_height();
}
inline void LocationData_RelativeBoundingBox::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void LocationData_RelativeBoundingBox::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeBoundingBox.height)
}

// -------------------------------------------------------------------

// LocationData_BinaryMask

// optional int32 width = 1;
inline bool LocationData_BinaryMask::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocationData_BinaryMask::has_width() const {
  return _internal_has_width();
}
inline void LocationData_BinaryMask::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BinaryMask::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BinaryMask::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BinaryMask.width)
  return _internal_width();
}
inline void LocationData_BinaryMask::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void LocationData_BinaryMask::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BinaryMask.width)
}

// optional int32 height = 2;
inline bool LocationData_BinaryMask::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocationData_BinaryMask::has_height() const {
  return _internal_has_height();
}
inline void LocationData_BinaryMask::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BinaryMask::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationData_BinaryMask::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BinaryMask.height)
  return _internal_height();
}
inline void LocationData_BinaryMask::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void LocationData_BinaryMask::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.BinaryMask.height)
}

// optional .mediapipe.Rasterization rasterization = 3;
inline bool LocationData_BinaryMask::_internal_has_rasterization() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rasterization_ != nullptr);
  return value;
}
inline bool LocationData_BinaryMask::has_rasterization() const {
  return _internal_has_rasterization();
}
inline void LocationData_BinaryMask::clear_rasterization() {
  if (rasterization_ != nullptr) rasterization_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::Rasterization& LocationData_BinaryMask::_internal_rasterization() const {
  const ::mediapipe::Rasterization* p = rasterization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::Rasterization*>(
      &::mediapipe::_Rasterization_default_instance_);
}
inline const ::mediapipe::Rasterization& LocationData_BinaryMask::rasterization() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.BinaryMask.rasterization)
  return _internal_rasterization();
}
inline void LocationData_BinaryMask::unsafe_arena_set_allocated_rasterization(
    ::mediapipe::Rasterization* rasterization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rasterization_);
  }
  rasterization_ = rasterization;
  if (rasterization) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LocationData.BinaryMask.rasterization)
}
inline ::mediapipe::Rasterization* LocationData_BinaryMask::release_rasterization() {
  auto temp = unsafe_arena_release_rasterization();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::Rasterization* LocationData_BinaryMask::unsafe_arena_release_rasterization() {
  // @@protoc_insertion_point(field_release:mediapipe.LocationData.BinaryMask.rasterization)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::Rasterization* temp = rasterization_;
  rasterization_ = nullptr;
  return temp;
}
inline ::mediapipe::Rasterization* LocationData_BinaryMask::_internal_mutable_rasterization() {
  _has_bits_[0] |= 0x00000001u;
  if (rasterization_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Rasterization>(GetArena());
    rasterization_ = p;
  }
  return rasterization_;
}
inline ::mediapipe::Rasterization* LocationData_BinaryMask::mutable_rasterization() {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.BinaryMask.rasterization)
  return _internal_mutable_rasterization();
}
inline void LocationData_BinaryMask::set_allocated_rasterization(::mediapipe::Rasterization* rasterization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rasterization_;
  }
  if (rasterization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rasterization);
    if (message_arena != submessage_arena) {
      rasterization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rasterization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rasterization_ = rasterization;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LocationData.BinaryMask.rasterization)
}

// -------------------------------------------------------------------

// LocationData_RelativeKeypoint

// optional float x = 1;
inline bool LocationData_RelativeKeypoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocationData_RelativeKeypoint::has_x() const {
  return _internal_has_x();
}
inline void LocationData_RelativeKeypoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LocationData_RelativeKeypoint::_internal_x() const {
  return x_;
}
inline float LocationData_RelativeKeypoint::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeKeypoint.x)
  return _internal_x();
}
inline void LocationData_RelativeKeypoint::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void LocationData_RelativeKeypoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeKeypoint.x)
}

// optional float y = 2;
inline bool LocationData_RelativeKeypoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocationData_RelativeKeypoint::has_y() const {
  return _internal_has_y();
}
inline void LocationData_RelativeKeypoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LocationData_RelativeKeypoint::_internal_y() const {
  return y_;
}
inline float LocationData_RelativeKeypoint::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeKeypoint.y)
  return _internal_y();
}
inline void LocationData_RelativeKeypoint::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void LocationData_RelativeKeypoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeKeypoint.y)
}

// optional string keypoint_label = 3;
inline bool LocationData_RelativeKeypoint::_internal_has_keypoint_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocationData_RelativeKeypoint::has_keypoint_label() const {
  return _internal_has_keypoint_label();
}
inline void LocationData_RelativeKeypoint::clear_keypoint_label() {
  keypoint_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocationData_RelativeKeypoint::keypoint_label() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
  return _internal_keypoint_label();
}
inline void LocationData_RelativeKeypoint::set_keypoint_label(const std::string& value) {
  _internal_set_keypoint_label(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}
inline std::string* LocationData_RelativeKeypoint::mutable_keypoint_label() {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
  return _internal_mutable_keypoint_label();
}
inline const std::string& LocationData_RelativeKeypoint::_internal_keypoint_label() const {
  return keypoint_label_.Get();
}
inline void LocationData_RelativeKeypoint::_internal_set_keypoint_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keypoint_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LocationData_RelativeKeypoint::set_keypoint_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  keypoint_label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}
inline void LocationData_RelativeKeypoint::set_keypoint_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  keypoint_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}
inline void LocationData_RelativeKeypoint::set_keypoint_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  keypoint_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}
inline std::string* LocationData_RelativeKeypoint::_internal_mutable_keypoint_label() {
  _has_bits_[0] |= 0x00000001u;
  return keypoint_label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LocationData_RelativeKeypoint::release_keypoint_label() {
  // @@protoc_insertion_point(field_release:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
  if (!_internal_has_keypoint_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keypoint_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationData_RelativeKeypoint::set_allocated_keypoint_label(std::string* keypoint_label) {
  if (keypoint_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keypoint_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoint_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}
inline std::string* LocationData_RelativeKeypoint::unsafe_arena_release_keypoint_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return keypoint_label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LocationData_RelativeKeypoint::unsafe_arena_set_allocated_keypoint_label(
    std::string* keypoint_label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (keypoint_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keypoint_label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      keypoint_label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LocationData.RelativeKeypoint.keypoint_label)
}

// optional float score = 4;
inline bool LocationData_RelativeKeypoint::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocationData_RelativeKeypoint::has_score() const {
  return _internal_has_score();
}
inline void LocationData_RelativeKeypoint::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LocationData_RelativeKeypoint::_internal_score() const {
  return score_;
}
inline float LocationData_RelativeKeypoint::score() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.RelativeKeypoint.score)
  return _internal_score();
}
inline void LocationData_RelativeKeypoint::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  score_ = value;
}
inline void LocationData_RelativeKeypoint::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.RelativeKeypoint.score)
}

// -------------------------------------------------------------------

// LocationData

// optional .mediapipe.LocationData.Format format = 1;
inline bool LocationData::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocationData::has_format() const {
  return _internal_has_format();
}
inline void LocationData::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mediapipe::LocationData_Format LocationData::_internal_format() const {
  return static_cast< ::mediapipe::LocationData_Format >(format_);
}
inline ::mediapipe::LocationData_Format LocationData::format() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.format)
  return _internal_format();
}
inline void LocationData::_internal_set_format(::mediapipe::LocationData_Format value) {
  assert(::mediapipe::LocationData_Format_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  format_ = value;
}
inline void LocationData::set_format(::mediapipe::LocationData_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:mediapipe.LocationData.format)
}

// optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
inline bool LocationData::_internal_has_bounding_box() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bounding_box_ != nullptr);
  return value;
}
inline bool LocationData::has_bounding_box() const {
  return _internal_has_bounding_box();
}
inline void LocationData::clear_bounding_box() {
  if (bounding_box_ != nullptr) bounding_box_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::LocationData_BoundingBox& LocationData::_internal_bounding_box() const {
  const ::mediapipe::LocationData_BoundingBox* p = bounding_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::LocationData_BoundingBox*>(
      &::mediapipe::_LocationData_BoundingBox_default_instance_);
}
inline const ::mediapipe::LocationData_BoundingBox& LocationData::bounding_box() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.bounding_box)
  return _internal_bounding_box();
}
inline void LocationData::unsafe_arena_set_allocated_bounding_box(
    ::mediapipe::LocationData_BoundingBox* bounding_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_box_);
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LocationData.bounding_box)
}
inline ::mediapipe::LocationData_BoundingBox* LocationData::release_bounding_box() {
  auto temp = unsafe_arena_release_bounding_box();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::LocationData_BoundingBox* LocationData::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_release:mediapipe.LocationData.bounding_box)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::LocationData_BoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::mediapipe::LocationData_BoundingBox* LocationData::_internal_mutable_bounding_box() {
  _has_bits_[0] |= 0x00000001u;
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LocationData_BoundingBox>(GetArena());
    bounding_box_ = p;
  }
  return bounding_box_;
}
inline ::mediapipe::LocationData_BoundingBox* LocationData::mutable_bounding_box() {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.bounding_box)
  return _internal_mutable_bounding_box();
}
inline void LocationData::set_allocated_bounding_box(::mediapipe::LocationData_BoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bounding_box);
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LocationData.bounding_box)
}

// optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
inline bool LocationData::_internal_has_relative_bounding_box() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || relative_bounding_box_ != nullptr);
  return value;
}
inline bool LocationData::has_relative_bounding_box() const {
  return _internal_has_relative_bounding_box();
}
inline void LocationData::clear_relative_bounding_box() {
  if (relative_bounding_box_ != nullptr) relative_bounding_box_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::LocationData_RelativeBoundingBox& LocationData::_internal_relative_bounding_box() const {
  const ::mediapipe::LocationData_RelativeBoundingBox* p = relative_bounding_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::LocationData_RelativeBoundingBox*>(
      &::mediapipe::_LocationData_RelativeBoundingBox_default_instance_);
}
inline const ::mediapipe::LocationData_RelativeBoundingBox& LocationData::relative_bounding_box() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.relative_bounding_box)
  return _internal_relative_bounding_box();
}
inline void LocationData::unsafe_arena_set_allocated_relative_bounding_box(
    ::mediapipe::LocationData_RelativeBoundingBox* relative_bounding_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_bounding_box_);
  }
  relative_bounding_box_ = relative_bounding_box;
  if (relative_bounding_box) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LocationData.relative_bounding_box)
}
inline ::mediapipe::LocationData_RelativeBoundingBox* LocationData::release_relative_bounding_box() {
  auto temp = unsafe_arena_release_relative_bounding_box();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::LocationData_RelativeBoundingBox* LocationData::unsafe_arena_release_relative_bounding_box() {
  // @@protoc_insertion_point(field_release:mediapipe.LocationData.relative_bounding_box)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::LocationData_RelativeBoundingBox* temp = relative_bounding_box_;
  relative_bounding_box_ = nullptr;
  return temp;
}
inline ::mediapipe::LocationData_RelativeBoundingBox* LocationData::_internal_mutable_relative_bounding_box() {
  _has_bits_[0] |= 0x00000002u;
  if (relative_bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LocationData_RelativeBoundingBox>(GetArena());
    relative_bounding_box_ = p;
  }
  return relative_bounding_box_;
}
inline ::mediapipe::LocationData_RelativeBoundingBox* LocationData::mutable_relative_bounding_box() {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.relative_bounding_box)
  return _internal_mutable_relative_bounding_box();
}
inline void LocationData::set_allocated_relative_bounding_box(::mediapipe::LocationData_RelativeBoundingBox* relative_bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relative_bounding_box_;
  }
  if (relative_bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relative_bounding_box);
    if (message_arena != submessage_arena) {
      relative_bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_bounding_box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  relative_bounding_box_ = relative_bounding_box;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LocationData.relative_bounding_box)
}

// optional .mediapipe.LocationData.BinaryMask mask = 4;
inline bool LocationData::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mask_ != nullptr);
  return value;
}
inline bool LocationData::has_mask() const {
  return _internal_has_mask();
}
inline void LocationData::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::LocationData_BinaryMask& LocationData::_internal_mask() const {
  const ::mediapipe::LocationData_BinaryMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::LocationData_BinaryMask*>(
      &::mediapipe::_LocationData_BinaryMask_default_instance_);
}
inline const ::mediapipe::LocationData_BinaryMask& LocationData::mask() const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.mask)
  return _internal_mask();
}
inline void LocationData::unsafe_arena_set_allocated_mask(
    ::mediapipe::LocationData_BinaryMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LocationData.mask)
}
inline ::mediapipe::LocationData_BinaryMask* LocationData::release_mask() {
  auto temp = unsafe_arena_release_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::LocationData_BinaryMask* LocationData::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:mediapipe.LocationData.mask)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::LocationData_BinaryMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::mediapipe::LocationData_BinaryMask* LocationData::_internal_mutable_mask() {
  _has_bits_[0] |= 0x00000004u;
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LocationData_BinaryMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline ::mediapipe::LocationData_BinaryMask* LocationData::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.mask)
  return _internal_mutable_mask();
}
inline void LocationData::set_allocated_mask(::mediapipe::LocationData_BinaryMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LocationData.mask)
}

// repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
inline int LocationData::_internal_relative_keypoints_size() const {
  return relative_keypoints_.size();
}
inline int LocationData::relative_keypoints_size() const {
  return _internal_relative_keypoints_size();
}
inline void LocationData::clear_relative_keypoints() {
  relative_keypoints_.Clear();
}
inline ::mediapipe::LocationData_RelativeKeypoint* LocationData::mutable_relative_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.LocationData.relative_keypoints)
  return relative_keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LocationData_RelativeKeypoint >*
LocationData::mutable_relative_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.LocationData.relative_keypoints)
  return &relative_keypoints_;
}
inline const ::mediapipe::LocationData_RelativeKeypoint& LocationData::_internal_relative_keypoints(int index) const {
  return relative_keypoints_.Get(index);
}
inline const ::mediapipe::LocationData_RelativeKeypoint& LocationData::relative_keypoints(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.LocationData.relative_keypoints)
  return _internal_relative_keypoints(index);
}
inline ::mediapipe::LocationData_RelativeKeypoint* LocationData::_internal_add_relative_keypoints() {
  return relative_keypoints_.Add();
}
inline ::mediapipe::LocationData_RelativeKeypoint* LocationData::add_relative_keypoints() {
  // @@protoc_insertion_point(field_add:mediapipe.LocationData.relative_keypoints)
  return _internal_add_relative_keypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LocationData_RelativeKeypoint >&
LocationData::relative_keypoints() const {
  // @@protoc_insertion_point(field_list:mediapipe.LocationData.relative_keypoints)
  return relative_keypoints_;
}

// -------------------------------------------------------------------

// Detection_AssociatedDetection

// optional int32 id = 1;
inline bool Detection_AssociatedDetection::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detection_AssociatedDetection::has_id() const {
  return _internal_has_id();
}
inline void Detection_AssociatedDetection::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection_AssociatedDetection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection_AssociatedDetection::id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.AssociatedDetection.id)
  return _internal_id();
}
inline void Detection_AssociatedDetection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Detection_AssociatedDetection::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.AssociatedDetection.id)
}

// optional float confidence = 2;
inline bool Detection_AssociatedDetection::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detection_AssociatedDetection::has_confidence() const {
  return _internal_has_confidence();
}
inline void Detection_AssociatedDetection::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Detection_AssociatedDetection::_internal_confidence() const {
  return confidence_;
}
inline float Detection_AssociatedDetection::confidence() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.AssociatedDetection.confidence)
  return _internal_confidence();
}
inline void Detection_AssociatedDetection::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Detection_AssociatedDetection::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.AssociatedDetection.confidence)
}

// -------------------------------------------------------------------

// Detection

// repeated string label = 1;
inline int Detection::_internal_label_size() const {
  return label_.size();
}
inline int Detection::label_size() const {
  return _internal_label_size();
}
inline void Detection::clear_label() {
  label_.Clear();
}
inline std::string* Detection::add_label() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.Detection.label)
  return _internal_add_label();
}
inline const std::string& Detection::_internal_label(int index) const {
  return label_.Get(index);
}
inline const std::string& Detection::label(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.label)
  return _internal_label(index);
}
inline std::string* Detection::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.label)
  return label_.Mutable(index);
}
inline void Detection::set_label(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label)
  label_.Mutable(index)->assign(value);
}
inline void Detection::set_label(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label)
  label_.Mutable(index)->assign(std::move(value));
}
inline void Detection::set_label(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.label)
}
inline void Detection::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.label)
}
inline std::string* Detection::_internal_add_label() {
  return label_.Add();
}
inline void Detection::add_label(const std::string& value) {
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label)
}
inline void Detection::add_label(std::string&& value) {
  label_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label)
}
inline void Detection::add_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.Detection.label)
}
inline void Detection::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.Detection.label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detection::label() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.label)
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detection::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.label)
  return &label_;
}

// repeated int32 label_id = 2 [packed = true];
inline int Detection::_internal_label_id_size() const {
  return label_id_.size();
}
inline int Detection::label_id_size() const {
  return _internal_label_id_size();
}
inline void Detection::clear_label_id() {
  label_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection::_internal_label_id(int index) const {
  return label_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection::label_id(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.label_id)
  return _internal_label_id(index);
}
inline void Detection::set_label_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  label_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label_id)
}
inline void Detection::_internal_add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  label_id_.Add(value);
}
inline void Detection::add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_label_id(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Detection::_internal_label_id() const {
  return label_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Detection::label_id() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.label_id)
  return _internal_label_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Detection::_internal_mutable_label_id() {
  return &label_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Detection::mutable_label_id() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.label_id)
  return _internal_mutable_label_id();
}

// repeated float score = 3 [packed = true];
inline int Detection::_internal_score_size() const {
  return score_.size();
}
inline int Detection::score_size() const {
  return _internal_score_size();
}
inline void Detection::clear_score() {
  score_.Clear();
}
inline float Detection::_internal_score(int index) const {
  return score_.Get(index);
}
inline float Detection::score(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.score)
  return _internal_score(index);
}
inline void Detection::set_score(int index, float value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.score)
}
inline void Detection::_internal_add_score(float value) {
  score_.Add(value);
}
inline void Detection::add_score(float value) {
  _internal_add_score(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detection::_internal_score() const {
  return score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detection::score() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.score)
  return _internal_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detection::_internal_mutable_score() {
  return &score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detection::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.score)
  return _internal_mutable_score();
}

// optional .mediapipe.LocationData location_data = 4;
inline bool Detection::_internal_has_location_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || location_data_ != nullptr);
  return value;
}
inline bool Detection::has_location_data() const {
  return _internal_has_location_data();
}
inline void Detection::clear_location_data() {
  if (location_data_ != nullptr) location_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::LocationData& Detection::_internal_location_data() const {
  const ::mediapipe::LocationData* p = location_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::LocationData*>(
      &::mediapipe::_LocationData_default_instance_);
}
inline const ::mediapipe::LocationData& Detection::location_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.location_data)
  return _internal_location_data();
}
inline void Detection::unsafe_arena_set_allocated_location_data(
    ::mediapipe::LocationData* location_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_data_);
  }
  location_data_ = location_data;
  if (location_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.Detection.location_data)
}
inline ::mediapipe::LocationData* Detection::release_location_data() {
  auto temp = unsafe_arena_release_location_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::LocationData* Detection::unsafe_arena_release_location_data() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.location_data)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::LocationData* temp = location_data_;
  location_data_ = nullptr;
  return temp;
}
inline ::mediapipe::LocationData* Detection::_internal_mutable_location_data() {
  _has_bits_[0] |= 0x00000004u;
  if (location_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LocationData>(GetArena());
    location_data_ = p;
  }
  return location_data_;
}
inline ::mediapipe::LocationData* Detection::mutable_location_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.location_data)
  return _internal_mutable_location_data();
}
inline void Detection::set_allocated_location_data(::mediapipe::LocationData* location_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_data_;
  }
  if (location_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location_data);
    if (message_arena != submessage_arena) {
      location_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  location_data_ = location_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.location_data)
}

// optional string feature_tag = 5;
inline bool Detection::_internal_has_feature_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detection::has_feature_tag() const {
  return _internal_has_feature_tag();
}
inline void Detection::clear_feature_tag() {
  feature_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Detection::feature_tag() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.feature_tag)
  return _internal_feature_tag();
}
inline void Detection::set_feature_tag(const std::string& value) {
  _internal_set_feature_tag(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.feature_tag)
}
inline std::string* Detection::mutable_feature_tag() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.feature_tag)
  return _internal_mutable_feature_tag();
}
inline const std::string& Detection::_internal_feature_tag() const {
  return feature_tag_.Get();
}
inline void Detection::_internal_set_feature_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Detection::set_feature_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.Detection.feature_tag)
}
inline void Detection::set_feature_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.feature_tag)
}
inline void Detection::set_feature_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.feature_tag)
}
inline std::string* Detection::_internal_mutable_feature_tag() {
  _has_bits_[0] |= 0x00000001u;
  return feature_tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Detection::release_feature_tag() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.feature_tag)
  if (!_internal_has_feature_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return feature_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detection::set_allocated_feature_tag(std::string* feature_tag) {
  if (feature_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feature_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.feature_tag)
}
inline std::string* Detection::unsafe_arena_release_feature_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.Detection.feature_tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return feature_tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Detection::unsafe_arena_set_allocated_feature_tag(
    std::string* feature_tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (feature_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feature_tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      feature_tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.Detection.feature_tag)
}

// optional string track_id = 6;
inline bool Detection::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detection::has_track_id() const {
  return _internal_has_track_id();
}
inline void Detection::clear_track_id() {
  track_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Detection::track_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.track_id)
  return _internal_track_id();
}
inline void Detection::set_track_id(const std::string& value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.track_id)
}
inline std::string* Detection::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.track_id)
  return _internal_mutable_track_id();
}
inline const std::string& Detection::_internal_track_id() const {
  return track_id_.Get();
}
inline void Detection::_internal_set_track_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Detection::set_track_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.Detection.track_id)
}
inline void Detection::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.track_id)
}
inline void Detection::set_track_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.track_id)
}
inline std::string* Detection::_internal_mutable_track_id() {
  _has_bits_[0] |= 0x00000002u;
  return track_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Detection::release_track_id() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.track_id)
  if (!_internal_has_track_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return track_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detection::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  track_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.track_id)
}
inline std::string* Detection::unsafe_arena_release_track_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.Detection.track_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return track_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Detection::unsafe_arena_set_allocated_track_id(
    std::string* track_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (track_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  track_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      track_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.Detection.track_id)
}

// optional int64 detection_id = 7;
inline bool Detection::_internal_has_detection_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Detection::has_detection_id() const {
  return _internal_has_detection_id();
}
inline void Detection::clear_detection_id() {
  detection_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::_internal_detection_id() const {
  return detection_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::detection_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.detection_id)
  return _internal_detection_id();
}
inline void Detection::_internal_set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  detection_id_ = value;
}
inline void Detection::set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_detection_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.detection_id)
}

// repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
inline int Detection::_internal_associated_detections_size() const {
  return associated_detections_.size();
}
inline int Detection::associated_detections_size() const {
  return _internal_associated_detections_size();
}
inline void Detection::clear_associated_detections() {
  associated_detections_.Clear();
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::mutable_associated_detections(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.associated_detections)
  return associated_detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >*
Detection::mutable_associated_detections() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.associated_detections)
  return &associated_detections_;
}
inline const ::mediapipe::Detection_AssociatedDetection& Detection::_internal_associated_detections(int index) const {
  return associated_detections_.Get(index);
}
inline const ::mediapipe::Detection_AssociatedDetection& Detection::associated_detections(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.associated_detections)
  return _internal_associated_detections(index);
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::_internal_add_associated_detections() {
  return associated_detections_.Add();
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::add_associated_detections() {
  // @@protoc_insertion_point(field_add:mediapipe.Detection.associated_detections)
  return _internal_add_associated_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >&
Detection::associated_detections() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.associated_detections)
  return associated_detections_;
}

// repeated string display_name = 9;
inline int Detection::_internal_display_name_size() const {
  return display_name_.size();
}
inline int Detection::display_name_size() const {
  return _internal_display_name_size();
}
inline void Detection::clear_display_name() {
  display_name_.Clear();
}
inline std::string* Detection::add_display_name() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.Detection.display_name)
  return _internal_add_display_name();
}
inline const std::string& Detection::_internal_display_name(int index) const {
  return display_name_.Get(index);
}
inline const std::string& Detection::display_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.display_name)
  return _internal_display_name(index);
}
inline std::string* Detection::mutable_display_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.display_name)
  return display_name_.Mutable(index);
}
inline void Detection::set_display_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.display_name)
  display_name_.Mutable(index)->assign(value);
}
inline void Detection::set_display_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.display_name)
  display_name_.Mutable(index)->assign(std::move(value));
}
inline void Detection::set_display_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  display_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.display_name)
}
inline void Detection::set_display_name(int index, const char* value, size_t size) {
  display_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.display_name)
}
inline std::string* Detection::_internal_add_display_name() {
  return display_name_.Add();
}
inline void Detection::add_display_name(const std::string& value) {
  display_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(std::string&& value) {
  display_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  display_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(const char* value, size_t size) {
  display_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.Detection.display_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detection::display_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.display_name)
  return display_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detection::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.display_name)
  return &display_name_;
}

// optional int64 timestamp_usec = 10;
inline bool Detection::_internal_has_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Detection::has_timestamp_usec() const {
  return _internal_has_timestamp_usec();
}
inline void Detection::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::_internal_timestamp_usec() const {
  return timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void Detection::_internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_usec_ = value;
}
inline void Detection::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.timestamp_usec)
}

// -------------------------------------------------------------------

// DetectionList

// repeated .mediapipe.Detection detection = 1;
inline int DetectionList::_internal_detection_size() const {
  return detection_.size();
}
inline int DetectionList::detection_size() const {
  return _internal_detection_size();
}
inline void DetectionList::clear_detection() {
  detection_.Clear();
}
inline ::mediapipe::Detection* DetectionList::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.DetectionList.detection)
  return detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >*
DetectionList::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.DetectionList.detection)
  return &detection_;
}
inline const ::mediapipe::Detection& DetectionList::_internal_detection(int index) const {
  return detection_.Get(index);
}
inline const ::mediapipe::Detection& DetectionList::detection(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.DetectionList.detection)
  return _internal_detection(index);
}
inline ::mediapipe::Detection* DetectionList::_internal_add_detection() {
  return detection_.Add();
}
inline ::mediapipe::Detection* DetectionList::add_detection() {
  // @@protoc_insertion_point(field_add:mediapipe.DetectionList.detection)
  return _internal_add_detection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >&
DetectionList::detection() const {
  // @@protoc_insertion_point(field_list:mediapipe.DetectionList.detection)
  return detection_;
}

// -------------------------------------------------------------------

// WrapperHandTracking

// optional .mediapipe.NormalizedLandmarkList landmarks = 1;
inline bool WrapperHandTracking::_internal_has_landmarks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || landmarks_ != nullptr);
  return value;
}
inline bool WrapperHandTracking::has_landmarks() const {
  return _internal_has_landmarks();
}
inline void WrapperHandTracking::clear_landmarks() {
  if (landmarks_ != nullptr) landmarks_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperHandTracking::_internal_landmarks() const {
  const ::mediapipe::NormalizedLandmarkList* p = landmarks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperHandTracking::landmarks() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperHandTracking.landmarks)
  return _internal_landmarks();
}
inline void WrapperHandTracking::unsafe_arena_set_allocated_landmarks(
    ::mediapipe::NormalizedLandmarkList* landmarks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmarks_);
  }
  landmarks_ = landmarks;
  if (landmarks) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperHandTracking.landmarks)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperHandTracking::release_landmarks() {
  auto temp = unsafe_arena_release_landmarks();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperHandTracking::unsafe_arena_release_landmarks() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperHandTracking.landmarks)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::NormalizedLandmarkList* temp = landmarks_;
  landmarks_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperHandTracking::_internal_mutable_landmarks() {
  _has_bits_[0] |= 0x00000001u;
  if (landmarks_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    landmarks_ = p;
  }
  return landmarks_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperHandTracking::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperHandTracking.landmarks)
  return _internal_mutable_landmarks();
}
inline void WrapperHandTracking::set_allocated_landmarks(::mediapipe::NormalizedLandmarkList* landmarks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landmarks_;
  }
  if (landmarks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landmarks);
    if (message_arena != submessage_arena) {
      landmarks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmarks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  landmarks_ = landmarks;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperHandTracking.landmarks)
}

// optional .mediapipe.NormalizedRect rect = 2;
inline bool WrapperHandTracking::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool WrapperHandTracking::has_rect() const {
  return _internal_has_rect();
}
inline void WrapperHandTracking::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::NormalizedRect& WrapperHandTracking::_internal_rect() const {
  const ::mediapipe::NormalizedRect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedRect*>(
      &::mediapipe::_NormalizedRect_default_instance_);
}
inline const ::mediapipe::NormalizedRect& WrapperHandTracking::rect() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperHandTracking.rect)
  return _internal_rect();
}
inline void WrapperHandTracking::unsafe_arena_set_allocated_rect(
    ::mediapipe::NormalizedRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperHandTracking.rect)
}
inline ::mediapipe::NormalizedRect* WrapperHandTracking::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperHandTracking::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperHandTracking.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::NormalizedRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperHandTracking::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::mediapipe::NormalizedRect* WrapperHandTracking::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperHandTracking.rect)
  return _internal_mutable_rect();
}
inline void WrapperHandTracking::set_allocated_rect(::mediapipe::NormalizedRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperHandTracking.rect)
}

// optional .mediapipe.DetectionList detection = 3;
inline bool WrapperHandTracking::_internal_has_detection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_ != nullptr);
  return value;
}
inline bool WrapperHandTracking::has_detection() const {
  return _internal_has_detection();
}
inline void WrapperHandTracking::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::DetectionList& WrapperHandTracking::_internal_detection() const {
  const ::mediapipe::DetectionList* p = detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperHandTracking::detection() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperHandTracking.detection)
  return _internal_detection();
}
inline void WrapperHandTracking::unsafe_arena_set_allocated_detection(
    ::mediapipe::DetectionList* detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_);
  }
  detection_ = detection;
  if (detection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperHandTracking.detection)
}
inline ::mediapipe::DetectionList* WrapperHandTracking::release_detection() {
  auto temp = unsafe_arena_release_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperHandTracking::unsafe_arena_release_detection() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperHandTracking.detection)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::DetectionList* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperHandTracking::_internal_mutable_detection() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detection_ = p;
  }
  return detection_;
}
inline ::mediapipe::DetectionList* WrapperHandTracking::mutable_detection() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperHandTracking.detection)
  return _internal_mutable_detection();
}
inline void WrapperHandTracking::set_allocated_detection(::mediapipe::DetectionList* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection);
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperHandTracking.detection)
}

// -------------------------------------------------------------------

// WrapperMultiHand

// optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
inline bool WrapperMultiHand::_internal_has_landmarkgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || landmarkgroup_ != nullptr);
  return value;
}
inline bool WrapperMultiHand::has_landmarkgroup() const {
  return _internal_has_landmarkgroup();
}
inline void WrapperMultiHand::clear_landmarkgroup() {
  if (landmarkgroup_ != nullptr) landmarkgroup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::NormalizedLandmarkGroup& WrapperMultiHand::_internal_landmarkgroup() const {
  const ::mediapipe::NormalizedLandmarkGroup* p = landmarkgroup_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkGroup*>(
      &::mediapipe::_NormalizedLandmarkGroup_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkGroup& WrapperMultiHand::landmarkgroup() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperMultiHand.landmarkgroup)
  return _internal_landmarkgroup();
}
inline void WrapperMultiHand::unsafe_arena_set_allocated_landmarkgroup(
    ::mediapipe::NormalizedLandmarkGroup* landmarkgroup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmarkgroup_);
  }
  landmarkgroup_ = landmarkgroup;
  if (landmarkgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperMultiHand.landmarkgroup)
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperMultiHand::release_landmarkgroup() {
  auto temp = unsafe_arena_release_landmarkgroup();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperMultiHand::unsafe_arena_release_landmarkgroup() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperMultiHand.landmarkgroup)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::NormalizedLandmarkGroup* temp = landmarkgroup_;
  landmarkgroup_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperMultiHand::_internal_mutable_landmarkgroup() {
  _has_bits_[0] |= 0x00000001u;
  if (landmarkgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkGroup>(GetArena());
    landmarkgroup_ = p;
  }
  return landmarkgroup_;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperMultiHand::mutable_landmarkgroup() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperMultiHand.landmarkgroup)
  return _internal_mutable_landmarkgroup();
}
inline void WrapperMultiHand::set_allocated_landmarkgroup(::mediapipe::NormalizedLandmarkGroup* landmarkgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landmarkgroup_;
  }
  if (landmarkgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landmarkgroup);
    if (message_arena != submessage_arena) {
      landmarkgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmarkgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  landmarkgroup_ = landmarkgroup;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperMultiHand.landmarkgroup)
}

// optional .mediapipe.NormalizedRect rect = 2;
inline bool WrapperMultiHand::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool WrapperMultiHand::has_rect() const {
  return _internal_has_rect();
}
inline void WrapperMultiHand::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::NormalizedRect& WrapperMultiHand::_internal_rect() const {
  const ::mediapipe::NormalizedRect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedRect*>(
      &::mediapipe::_NormalizedRect_default_instance_);
}
inline const ::mediapipe::NormalizedRect& WrapperMultiHand::rect() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperMultiHand.rect)
  return _internal_rect();
}
inline void WrapperMultiHand::unsafe_arena_set_allocated_rect(
    ::mediapipe::NormalizedRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperMultiHand.rect)
}
inline ::mediapipe::NormalizedRect* WrapperMultiHand::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperMultiHand::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperMultiHand.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::NormalizedRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperMultiHand::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::mediapipe::NormalizedRect* WrapperMultiHand::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperMultiHand.rect)
  return _internal_mutable_rect();
}
inline void WrapperMultiHand::set_allocated_rect(::mediapipe::NormalizedRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperMultiHand.rect)
}

// optional .mediapipe.DetectionList detection = 3;
inline bool WrapperMultiHand::_internal_has_detection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_ != nullptr);
  return value;
}
inline bool WrapperMultiHand::has_detection() const {
  return _internal_has_detection();
}
inline void WrapperMultiHand::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::DetectionList& WrapperMultiHand::_internal_detection() const {
  const ::mediapipe::DetectionList* p = detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperMultiHand::detection() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperMultiHand.detection)
  return _internal_detection();
}
inline void WrapperMultiHand::unsafe_arena_set_allocated_detection(
    ::mediapipe::DetectionList* detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_);
  }
  detection_ = detection;
  if (detection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperMultiHand.detection)
}
inline ::mediapipe::DetectionList* WrapperMultiHand::release_detection() {
  auto temp = unsafe_arena_release_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperMultiHand::unsafe_arena_release_detection() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperMultiHand.detection)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::DetectionList* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperMultiHand::_internal_mutable_detection() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detection_ = p;
  }
  return detection_;
}
inline ::mediapipe::DetectionList* WrapperMultiHand::mutable_detection() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperMultiHand.detection)
  return _internal_mutable_detection();
}
inline void WrapperMultiHand::set_allocated_detection(::mediapipe::DetectionList* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection);
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperMultiHand.detection)
}

// optional int64 frame_id = 4;
inline bool WrapperMultiHand::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WrapperMultiHand::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WrapperMultiHand::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperMultiHand::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperMultiHand::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperMultiHand.frame_id)
  return _internal_frame_id();
}
inline void WrapperMultiHand::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  frame_id_ = value;
}
inline void WrapperMultiHand::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.WrapperMultiHand.frame_id)
}

// -------------------------------------------------------------------

// WrapperIris

// optional .mediapipe.NormalizedLandmarkList eye_landmarks_left = 1;
inline bool WrapperIris::_internal_has_eye_landmarks_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || eye_landmarks_left_ != nullptr);
  return value;
}
inline bool WrapperIris::has_eye_landmarks_left() const {
  return _internal_has_eye_landmarks_left();
}
inline void WrapperIris::clear_eye_landmarks_left() {
  if (eye_landmarks_left_ != nullptr) eye_landmarks_left_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::_internal_eye_landmarks_left() const {
  const ::mediapipe::NormalizedLandmarkList* p = eye_landmarks_left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::eye_landmarks_left() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.eye_landmarks_left)
  return _internal_eye_landmarks_left();
}
inline void WrapperIris::unsafe_arena_set_allocated_eye_landmarks_left(
    ::mediapipe::NormalizedLandmarkList* eye_landmarks_left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eye_landmarks_left_);
  }
  eye_landmarks_left_ = eye_landmarks_left;
  if (eye_landmarks_left) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.eye_landmarks_left)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::release_eye_landmarks_left() {
  auto temp = unsafe_arena_release_eye_landmarks_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::unsafe_arena_release_eye_landmarks_left() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.eye_landmarks_left)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::NormalizedLandmarkList* temp = eye_landmarks_left_;
  eye_landmarks_left_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::_internal_mutable_eye_landmarks_left() {
  _has_bits_[0] |= 0x00000001u;
  if (eye_landmarks_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    eye_landmarks_left_ = p;
  }
  return eye_landmarks_left_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::mutable_eye_landmarks_left() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.eye_landmarks_left)
  return _internal_mutable_eye_landmarks_left();
}
inline void WrapperIris::set_allocated_eye_landmarks_left(::mediapipe::NormalizedLandmarkList* eye_landmarks_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eye_landmarks_left_;
  }
  if (eye_landmarks_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eye_landmarks_left);
    if (message_arena != submessage_arena) {
      eye_landmarks_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eye_landmarks_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  eye_landmarks_left_ = eye_landmarks_left;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.eye_landmarks_left)
}

// optional .mediapipe.NormalizedLandmarkList eye_landmarks_right = 2;
inline bool WrapperIris::_internal_has_eye_landmarks_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || eye_landmarks_right_ != nullptr);
  return value;
}
inline bool WrapperIris::has_eye_landmarks_right() const {
  return _internal_has_eye_landmarks_right();
}
inline void WrapperIris::clear_eye_landmarks_right() {
  if (eye_landmarks_right_ != nullptr) eye_landmarks_right_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::_internal_eye_landmarks_right() const {
  const ::mediapipe::NormalizedLandmarkList* p = eye_landmarks_right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::eye_landmarks_right() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.eye_landmarks_right)
  return _internal_eye_landmarks_right();
}
inline void WrapperIris::unsafe_arena_set_allocated_eye_landmarks_right(
    ::mediapipe::NormalizedLandmarkList* eye_landmarks_right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eye_landmarks_right_);
  }
  eye_landmarks_right_ = eye_landmarks_right;
  if (eye_landmarks_right) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.eye_landmarks_right)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::release_eye_landmarks_right() {
  auto temp = unsafe_arena_release_eye_landmarks_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::unsafe_arena_release_eye_landmarks_right() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.eye_landmarks_right)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::NormalizedLandmarkList* temp = eye_landmarks_right_;
  eye_landmarks_right_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::_internal_mutable_eye_landmarks_right() {
  _has_bits_[0] |= 0x00000002u;
  if (eye_landmarks_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    eye_landmarks_right_ = p;
  }
  return eye_landmarks_right_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::mutable_eye_landmarks_right() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.eye_landmarks_right)
  return _internal_mutable_eye_landmarks_right();
}
inline void WrapperIris::set_allocated_eye_landmarks_right(::mediapipe::NormalizedLandmarkList* eye_landmarks_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eye_landmarks_right_;
  }
  if (eye_landmarks_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eye_landmarks_right);
    if (message_arena != submessage_arena) {
      eye_landmarks_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eye_landmarks_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  eye_landmarks_right_ = eye_landmarks_right;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.eye_landmarks_right)
}

// optional .mediapipe.NormalizedLandmarkList iris_landmarks_left = 3;
inline bool WrapperIris::_internal_has_iris_landmarks_left() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || iris_landmarks_left_ != nullptr);
  return value;
}
inline bool WrapperIris::has_iris_landmarks_left() const {
  return _internal_has_iris_landmarks_left();
}
inline void WrapperIris::clear_iris_landmarks_left() {
  if (iris_landmarks_left_ != nullptr) iris_landmarks_left_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::_internal_iris_landmarks_left() const {
  const ::mediapipe::NormalizedLandmarkList* p = iris_landmarks_left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::iris_landmarks_left() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.iris_landmarks_left)
  return _internal_iris_landmarks_left();
}
inline void WrapperIris::unsafe_arena_set_allocated_iris_landmarks_left(
    ::mediapipe::NormalizedLandmarkList* iris_landmarks_left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iris_landmarks_left_);
  }
  iris_landmarks_left_ = iris_landmarks_left;
  if (iris_landmarks_left) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.iris_landmarks_left)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::release_iris_landmarks_left() {
  auto temp = unsafe_arena_release_iris_landmarks_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::unsafe_arena_release_iris_landmarks_left() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.iris_landmarks_left)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::NormalizedLandmarkList* temp = iris_landmarks_left_;
  iris_landmarks_left_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::_internal_mutable_iris_landmarks_left() {
  _has_bits_[0] |= 0x00000004u;
  if (iris_landmarks_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    iris_landmarks_left_ = p;
  }
  return iris_landmarks_left_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::mutable_iris_landmarks_left() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.iris_landmarks_left)
  return _internal_mutable_iris_landmarks_left();
}
inline void WrapperIris::set_allocated_iris_landmarks_left(::mediapipe::NormalizedLandmarkList* iris_landmarks_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iris_landmarks_left_;
  }
  if (iris_landmarks_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iris_landmarks_left);
    if (message_arena != submessage_arena) {
      iris_landmarks_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iris_landmarks_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  iris_landmarks_left_ = iris_landmarks_left;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.iris_landmarks_left)
}

// optional .mediapipe.NormalizedLandmarkList iris_landmarks_right = 4;
inline bool WrapperIris::_internal_has_iris_landmarks_right() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || iris_landmarks_right_ != nullptr);
  return value;
}
inline bool WrapperIris::has_iris_landmarks_right() const {
  return _internal_has_iris_landmarks_right();
}
inline void WrapperIris::clear_iris_landmarks_right() {
  if (iris_landmarks_right_ != nullptr) iris_landmarks_right_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::_internal_iris_landmarks_right() const {
  const ::mediapipe::NormalizedLandmarkList* p = iris_landmarks_right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperIris::iris_landmarks_right() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.iris_landmarks_right)
  return _internal_iris_landmarks_right();
}
inline void WrapperIris::unsafe_arena_set_allocated_iris_landmarks_right(
    ::mediapipe::NormalizedLandmarkList* iris_landmarks_right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iris_landmarks_right_);
  }
  iris_landmarks_right_ = iris_landmarks_right;
  if (iris_landmarks_right) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.iris_landmarks_right)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::release_iris_landmarks_right() {
  auto temp = unsafe_arena_release_iris_landmarks_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::unsafe_arena_release_iris_landmarks_right() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.iris_landmarks_right)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::NormalizedLandmarkList* temp = iris_landmarks_right_;
  iris_landmarks_right_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::_internal_mutable_iris_landmarks_right() {
  _has_bits_[0] |= 0x00000008u;
  if (iris_landmarks_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    iris_landmarks_right_ = p;
  }
  return iris_landmarks_right_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperIris::mutable_iris_landmarks_right() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.iris_landmarks_right)
  return _internal_mutable_iris_landmarks_right();
}
inline void WrapperIris::set_allocated_iris_landmarks_right(::mediapipe::NormalizedLandmarkList* iris_landmarks_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iris_landmarks_right_;
  }
  if (iris_landmarks_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iris_landmarks_right);
    if (message_arena != submessage_arena) {
      iris_landmarks_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iris_landmarks_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  iris_landmarks_right_ = iris_landmarks_right;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.iris_landmarks_right)
}

// optional .mediapipe.NormalizedRect rect = 5;
inline bool WrapperIris::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool WrapperIris::has_rect() const {
  return _internal_has_rect();
}
inline void WrapperIris::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mediapipe::NormalizedRect& WrapperIris::_internal_rect() const {
  const ::mediapipe::NormalizedRect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedRect*>(
      &::mediapipe::_NormalizedRect_default_instance_);
}
inline const ::mediapipe::NormalizedRect& WrapperIris::rect() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.rect)
  return _internal_rect();
}
inline void WrapperIris::unsafe_arena_set_allocated_rect(
    ::mediapipe::NormalizedRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.rect)
}
inline ::mediapipe::NormalizedRect* WrapperIris::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperIris::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.rect)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::NormalizedRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperIris::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000010u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::mediapipe::NormalizedRect* WrapperIris::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.rect)
  return _internal_mutable_rect();
}
inline void WrapperIris::set_allocated_rect(::mediapipe::NormalizedRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.rect)
}

// optional .mediapipe.DetectionList detection = 6;
inline bool WrapperIris::_internal_has_detection() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || detection_ != nullptr);
  return value;
}
inline bool WrapperIris::has_detection() const {
  return _internal_has_detection();
}
inline void WrapperIris::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mediapipe::DetectionList& WrapperIris::_internal_detection() const {
  const ::mediapipe::DetectionList* p = detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperIris::detection() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.detection)
  return _internal_detection();
}
inline void WrapperIris::unsafe_arena_set_allocated_detection(
    ::mediapipe::DetectionList* detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_);
  }
  detection_ = detection;
  if (detection) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperIris.detection)
}
inline ::mediapipe::DetectionList* WrapperIris::release_detection() {
  auto temp = unsafe_arena_release_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperIris::unsafe_arena_release_detection() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperIris.detection)
  _has_bits_[0] &= ~0x00000020u;
  ::mediapipe::DetectionList* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperIris::_internal_mutable_detection() {
  _has_bits_[0] |= 0x00000020u;
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detection_ = p;
  }
  return detection_;
}
inline ::mediapipe::DetectionList* WrapperIris::mutable_detection() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperIris.detection)
  return _internal_mutable_detection();
}
inline void WrapperIris::set_allocated_detection(::mediapipe::DetectionList* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection);
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperIris.detection)
}

// optional int64 frame_id = 7;
inline bool WrapperIris::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WrapperIris::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WrapperIris::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperIris::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperIris::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperIris.frame_id)
  return _internal_frame_id();
}
inline void WrapperIris::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  frame_id_ = value;
}
inline void WrapperIris::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.WrapperIris.frame_id)
}

// -------------------------------------------------------------------

// WrapperFaceMesh

// optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
inline bool WrapperFaceMesh::_internal_has_landmarkgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || landmarkgroup_ != nullptr);
  return value;
}
inline bool WrapperFaceMesh::has_landmarkgroup() const {
  return _internal_has_landmarkgroup();
}
inline void WrapperFaceMesh::clear_landmarkgroup() {
  if (landmarkgroup_ != nullptr) landmarkgroup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::NormalizedLandmarkGroup& WrapperFaceMesh::_internal_landmarkgroup() const {
  const ::mediapipe::NormalizedLandmarkGroup* p = landmarkgroup_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkGroup*>(
      &::mediapipe::_NormalizedLandmarkGroup_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkGroup& WrapperFaceMesh::landmarkgroup() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperFaceMesh.landmarkgroup)
  return _internal_landmarkgroup();
}
inline void WrapperFaceMesh::unsafe_arena_set_allocated_landmarkgroup(
    ::mediapipe::NormalizedLandmarkGroup* landmarkgroup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmarkgroup_);
  }
  landmarkgroup_ = landmarkgroup;
  if (landmarkgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperFaceMesh.landmarkgroup)
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperFaceMesh::release_landmarkgroup() {
  auto temp = unsafe_arena_release_landmarkgroup();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperFaceMesh::unsafe_arena_release_landmarkgroup() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperFaceMesh.landmarkgroup)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::NormalizedLandmarkGroup* temp = landmarkgroup_;
  landmarkgroup_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperFaceMesh::_internal_mutable_landmarkgroup() {
  _has_bits_[0] |= 0x00000001u;
  if (landmarkgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkGroup>(GetArena());
    landmarkgroup_ = p;
  }
  return landmarkgroup_;
}
inline ::mediapipe::NormalizedLandmarkGroup* WrapperFaceMesh::mutable_landmarkgroup() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperFaceMesh.landmarkgroup)
  return _internal_mutable_landmarkgroup();
}
inline void WrapperFaceMesh::set_allocated_landmarkgroup(::mediapipe::NormalizedLandmarkGroup* landmarkgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landmarkgroup_;
  }
  if (landmarkgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landmarkgroup);
    if (message_arena != submessage_arena) {
      landmarkgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmarkgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  landmarkgroup_ = landmarkgroup;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperFaceMesh.landmarkgroup)
}

// optional .mediapipe.NormalizedRect rect = 2;
inline bool WrapperFaceMesh::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool WrapperFaceMesh::has_rect() const {
  return _internal_has_rect();
}
inline void WrapperFaceMesh::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::NormalizedRect& WrapperFaceMesh::_internal_rect() const {
  const ::mediapipe::NormalizedRect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedRect*>(
      &::mediapipe::_NormalizedRect_default_instance_);
}
inline const ::mediapipe::NormalizedRect& WrapperFaceMesh::rect() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperFaceMesh.rect)
  return _internal_rect();
}
inline void WrapperFaceMesh::unsafe_arena_set_allocated_rect(
    ::mediapipe::NormalizedRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperFaceMesh.rect)
}
inline ::mediapipe::NormalizedRect* WrapperFaceMesh::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperFaceMesh::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperFaceMesh.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::NormalizedRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperFaceMesh::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::mediapipe::NormalizedRect* WrapperFaceMesh::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperFaceMesh.rect)
  return _internal_mutable_rect();
}
inline void WrapperFaceMesh::set_allocated_rect(::mediapipe::NormalizedRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperFaceMesh.rect)
}

// optional .mediapipe.DetectionList detection = 3;
inline bool WrapperFaceMesh::_internal_has_detection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_ != nullptr);
  return value;
}
inline bool WrapperFaceMesh::has_detection() const {
  return _internal_has_detection();
}
inline void WrapperFaceMesh::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::DetectionList& WrapperFaceMesh::_internal_detection() const {
  const ::mediapipe::DetectionList* p = detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperFaceMesh::detection() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperFaceMesh.detection)
  return _internal_detection();
}
inline void WrapperFaceMesh::unsafe_arena_set_allocated_detection(
    ::mediapipe::DetectionList* detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_);
  }
  detection_ = detection;
  if (detection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperFaceMesh.detection)
}
inline ::mediapipe::DetectionList* WrapperFaceMesh::release_detection() {
  auto temp = unsafe_arena_release_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperFaceMesh::unsafe_arena_release_detection() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperFaceMesh.detection)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::DetectionList* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperFaceMesh::_internal_mutable_detection() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detection_ = p;
  }
  return detection_;
}
inline ::mediapipe::DetectionList* WrapperFaceMesh::mutable_detection() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperFaceMesh.detection)
  return _internal_mutable_detection();
}
inline void WrapperFaceMesh::set_allocated_detection(::mediapipe::DetectionList* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection);
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperFaceMesh.detection)
}

// optional int64 frame_id = 4;
inline bool WrapperFaceMesh::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WrapperFaceMesh::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WrapperFaceMesh::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperFaceMesh::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperFaceMesh::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperFaceMesh.frame_id)
  return _internal_frame_id();
}
inline void WrapperFaceMesh::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  frame_id_ = value;
}
inline void WrapperFaceMesh::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.WrapperFaceMesh.frame_id)
}

// -------------------------------------------------------------------

// WrapperUpperBody

// optional .mediapipe.NormalizedLandmarkList landmarks = 1;
inline bool WrapperUpperBody::_internal_has_landmarks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || landmarks_ != nullptr);
  return value;
}
inline bool WrapperUpperBody::has_landmarks() const {
  return _internal_has_landmarks();
}
inline void WrapperUpperBody::clear_landmarks() {
  if (landmarks_ != nullptr) landmarks_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperUpperBody::_internal_landmarks() const {
  const ::mediapipe::NormalizedLandmarkList* p = landmarks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedLandmarkList*>(
      &::mediapipe::_NormalizedLandmarkList_default_instance_);
}
inline const ::mediapipe::NormalizedLandmarkList& WrapperUpperBody::landmarks() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperUpperBody.landmarks)
  return _internal_landmarks();
}
inline void WrapperUpperBody::unsafe_arena_set_allocated_landmarks(
    ::mediapipe::NormalizedLandmarkList* landmarks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmarks_);
  }
  landmarks_ = landmarks;
  if (landmarks) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperUpperBody.landmarks)
}
inline ::mediapipe::NormalizedLandmarkList* WrapperUpperBody::release_landmarks() {
  auto temp = unsafe_arena_release_landmarks();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperUpperBody::unsafe_arena_release_landmarks() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperUpperBody.landmarks)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::NormalizedLandmarkList* temp = landmarks_;
  landmarks_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperUpperBody::_internal_mutable_landmarks() {
  _has_bits_[0] |= 0x00000001u;
  if (landmarks_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(GetArena());
    landmarks_ = p;
  }
  return landmarks_;
}
inline ::mediapipe::NormalizedLandmarkList* WrapperUpperBody::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperUpperBody.landmarks)
  return _internal_mutable_landmarks();
}
inline void WrapperUpperBody::set_allocated_landmarks(::mediapipe::NormalizedLandmarkList* landmarks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landmarks_;
  }
  if (landmarks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landmarks);
    if (message_arena != submessage_arena) {
      landmarks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmarks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  landmarks_ = landmarks;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperUpperBody.landmarks)
}

// optional .mediapipe.NormalizedRect rect = 2;
inline bool WrapperUpperBody::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool WrapperUpperBody::has_rect() const {
  return _internal_has_rect();
}
inline void WrapperUpperBody::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::NormalizedRect& WrapperUpperBody::_internal_rect() const {
  const ::mediapipe::NormalizedRect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::NormalizedRect*>(
      &::mediapipe::_NormalizedRect_default_instance_);
}
inline const ::mediapipe::NormalizedRect& WrapperUpperBody::rect() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperUpperBody.rect)
  return _internal_rect();
}
inline void WrapperUpperBody::unsafe_arena_set_allocated_rect(
    ::mediapipe::NormalizedRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperUpperBody.rect)
}
inline ::mediapipe::NormalizedRect* WrapperUpperBody::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperUpperBody::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperUpperBody.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::NormalizedRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedRect* WrapperUpperBody::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::mediapipe::NormalizedRect* WrapperUpperBody::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperUpperBody.rect)
  return _internal_mutable_rect();
}
inline void WrapperUpperBody::set_allocated_rect(::mediapipe::NormalizedRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperUpperBody.rect)
}

// optional .mediapipe.DetectionList detection = 3;
inline bool WrapperUpperBody::_internal_has_detection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_ != nullptr);
  return value;
}
inline bool WrapperUpperBody::has_detection() const {
  return _internal_has_detection();
}
inline void WrapperUpperBody::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::DetectionList& WrapperUpperBody::_internal_detection() const {
  const ::mediapipe::DetectionList* p = detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperUpperBody::detection() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperUpperBody.detection)
  return _internal_detection();
}
inline void WrapperUpperBody::unsafe_arena_set_allocated_detection(
    ::mediapipe::DetectionList* detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_);
  }
  detection_ = detection;
  if (detection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperUpperBody.detection)
}
inline ::mediapipe::DetectionList* WrapperUpperBody::release_detection() {
  auto temp = unsafe_arena_release_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperUpperBody::unsafe_arena_release_detection() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperUpperBody.detection)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::DetectionList* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperUpperBody::_internal_mutable_detection() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detection_ = p;
  }
  return detection_;
}
inline ::mediapipe::DetectionList* WrapperUpperBody::mutable_detection() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperUpperBody.detection)
  return _internal_mutable_detection();
}
inline void WrapperUpperBody::set_allocated_detection(::mediapipe::DetectionList* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection);
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperUpperBody.detection)
}

// optional int64 frame_id = 4;
inline bool WrapperUpperBody::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WrapperUpperBody::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WrapperUpperBody::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperUpperBody::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperUpperBody::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperUpperBody.frame_id)
  return _internal_frame_id();
}
inline void WrapperUpperBody::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  frame_id_ = value;
}
inline void WrapperUpperBody::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.WrapperUpperBody.frame_id)
}

// -------------------------------------------------------------------

// WrapperObjectTracking

// optional .mediapipe.DetectionList detections = 1;
inline bool WrapperObjectTracking::_internal_has_detections() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || detections_ != nullptr);
  return value;
}
inline bool WrapperObjectTracking::has_detections() const {
  return _internal_has_detections();
}
inline void WrapperObjectTracking::clear_detections() {
  if (detections_ != nullptr) detections_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::DetectionList& WrapperObjectTracking::_internal_detections() const {
  const ::mediapipe::DetectionList* p = detections_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::DetectionList*>(
      &::mediapipe::_DetectionList_default_instance_);
}
inline const ::mediapipe::DetectionList& WrapperObjectTracking::detections() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperObjectTracking.detections)
  return _internal_detections();
}
inline void WrapperObjectTracking::unsafe_arena_set_allocated_detections(
    ::mediapipe::DetectionList* detections) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detections_);
  }
  detections_ = detections;
  if (detections) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.WrapperObjectTracking.detections)
}
inline ::mediapipe::DetectionList* WrapperObjectTracking::release_detections() {
  auto temp = unsafe_arena_release_detections();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::DetectionList* WrapperObjectTracking::unsafe_arena_release_detections() {
  // @@protoc_insertion_point(field_release:mediapipe.WrapperObjectTracking.detections)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::DetectionList* temp = detections_;
  detections_ = nullptr;
  return temp;
}
inline ::mediapipe::DetectionList* WrapperObjectTracking::_internal_mutable_detections() {
  _has_bits_[0] |= 0x00000001u;
  if (detections_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::DetectionList>(GetArena());
    detections_ = p;
  }
  return detections_;
}
inline ::mediapipe::DetectionList* WrapperObjectTracking::mutable_detections() {
  // @@protoc_insertion_point(field_mutable:mediapipe.WrapperObjectTracking.detections)
  return _internal_mutable_detections();
}
inline void WrapperObjectTracking::set_allocated_detections(::mediapipe::DetectionList* detections) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detections_;
  }
  if (detections) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detections);
    if (message_arena != submessage_arena) {
      detections = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detections, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  detections_ = detections;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.WrapperObjectTracking.detections)
}

// optional int64 frame_id = 2;
inline bool WrapperObjectTracking::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WrapperObjectTracking::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WrapperObjectTracking::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperObjectTracking::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WrapperObjectTracking::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.WrapperObjectTracking.frame_id)
  return _internal_frame_id();
}
inline void WrapperObjectTracking::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void WrapperObjectTracking::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.WrapperObjectTracking.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::LocationData_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::LocationData_Format>() {
  return ::mediapipe::LocationData_Format_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wrapper_5fmodel_2eproto
