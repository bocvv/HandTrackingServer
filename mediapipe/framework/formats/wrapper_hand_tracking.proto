// Copyright 2019 The MediaPipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// A protocol buffer encoding one or several detections in an image. A detection
// is defined by label and corresponding score, representing the classifier
// confidence for the label, and location, representing the spatial extent of
// the detection. All detections encoded by the protocol buffer relate to the
// same image location.

syntax = "proto2";

package mediapipe;

import "mediapipe/framework/formats/landmark.proto";
import "mediapipe/framework/formats/rect.proto";
import "mediapipe/framework/formats/detection.proto";

// !------------------------------------------------------!
// Uncomment below to build using protoc from command line
// Leave commented if you're building through Bazel
// !------------------------------------------------------!

// // A landmark that can have 1 to 3 dimensions. Use x for 1D points, (x, y) for
// // 2D points and (x, y, z) for 3D points. For more dimensions, consider using
// // matrix_data.proto.
// message Landmark {
//   optional float x = 1;
//   optional float y = 2;
//   optional float z = 3;
// }
//
// // Group of Landmark protos.
// message LandmarkList {
//   repeated Landmark landmark = 1;
// }
//
// // A normalized version of above Landmark proto. All coordiates should be within
// // [0, 1].
// message NormalizedLandmark {
//   optional float x = 1;
//   optional float y = 2;
//   optional float z = 3;
// }
//
// // Group of NormalizedLandmark protos.
// message NormalizedLandmarkList {
//   repeated NormalizedLandmark landmark = 1;
// }
//
// // A rectangle with rotation in image coordinates.
// message Rect {
//   // Location of the center of the rectangle in image coordinates.
//   // The (0, 0) point is at the (top, left) corner.
//   required int32 x_center = 1;
//   required int32 y_center = 2;
//
//   // Size of the rectangle.
//   required int32 height = 3;
//   required int32 width = 4;
//
//   // Rotation angle is clockwise in radians.
//   optional float rotation = 5 [default = 0.0];
//
//   // Optional unique id to help associate different Rects to each other.
//   optional int64 rect_id = 6;
// }
//
// // A rectangle with rotation in normalized coordinates. The values of box center
// // location and size are within [0, 1].
// message NormalizedRect {
//   // Location of the center of the rectangle in image coordinates.
//   // The (0.0, 0.0) point is at the (top, left) corner.
//   required float x_center = 1;
//   required float y_center = 2;
//
//   // Size of the rectangle.
//   required float height = 3;
//   required float width = 4;
//
//   // Rotation angle is clockwise in radians.
//   optional float rotation = 5 [default = 0.0];
//
//   // Optional unique id to help associate different NormalizedRects to each
//   // other.
//   optional int64 rect_id = 6;
// }
//
// // A Region can be represented in each frame as a set of scanlines
// // (compressed RLE, similar to rasterization of polygons).
// // For each scanline with y-coordinate y, we save (possibly multiple) intervals
// // of occupied pixels represented as a pair [left_x, right_x].
// message Rasterization {
//   message Interval {
//     required int32 y = 1;
//     required int32 left_x = 2;
//     required int32 right_x = 3;
//   }
//
//   // Intervals are always sorted by y-coordinate.
//   // Therefore, a region occupies a set of scanlines ranging
//   // from interval(0).y() to interval(interval_size() - 1)).y().
//   // Note: In video, at some scanlines no interval might be present.
//   repeated Interval interval = 1;
// }
//
// message LocationData {
//   // The supported formats for representing location data. A single location
//   // must store its data in exactly one way.
//   enum Format {
//     // The full image. This is a handy format when one needs to refer to the
//     // full image, e.g. one uses global image labels. No other fields need to
//     // be populated.
//     GLOBAL = 0;
//     // A rectangle aka bounding box of an object. The field bounding_box must be
//     // used to store the location data.
//     BOUNDING_BOX = 1;
//     // A rectangle aka bounding box of an object, defined in coordinates
//     // normalized by the image dimensions. The field relative_bounding_box must
//     // be used to store the location data.
//     RELATIVE_BOUNDING_BOX = 2;
//     // A foreground mask. The field mask must be used to store the location
//     // data.
//     MASK = 3;
//   }
//   optional Format format = 1;
//
//   // A bounding box in pixel units. The box is defined by its upper left corner
//   // (xmin, ymin) and its width and height.
//   message BoundingBox {
//     optional int32 xmin = 1;
//     optional int32 ymin = 2;
//     optional int32 width = 3;
//     optional int32 height = 4;
//   }
//   optional BoundingBox bounding_box = 2;
//
//   // A bounding box. The box is defined by its upper left corner (xmin, ymin)
//   // and its width and height, all in coordinates normalized by the image
//   // dimensions.
//   message RelativeBoundingBox {
//     optional float xmin = 1;
//     optional float ymin = 2;
//     optional float width = 3;
//     optional float height = 4;
//   }
//   optional RelativeBoundingBox relative_bounding_box = 3;
//
//   // A mask of size equivalent to the image size. It encodes a region, which
//   // can be thought of as a foreground object mask.
//   message BinaryMask {
//     // Dimensions of the mask.
//     optional int32 width = 1;
//     optional int32 height = 2;
//     // A rasterization-like format for storing the mask.
//     optional Rasterization rasterization = 3;
//   }
//   optional BinaryMask mask = 4;
//
//   // A keypoint. The keypoint is defined by the coordinates (x, y), normalized
//   // by the image dimensions.
//   message RelativeKeypoint {
//     optional float x = 1;
//     optional float y = 2;
//     optional string keypoint_label = 3;
//     optional float score = 4;
//   }
//   repeated RelativeKeypoint relative_keypoints = 5;
// }
//
//
// message Detection {
//   // i-th label or label_id has a score encoded by the i-th element in score.
//   // Either string or integer labels must be used but not both at the same time.
//   repeated string label = 1;
//   repeated int32 label_id = 2 [packed = true];
//   repeated float score = 3 [packed = true];
//
//   // Location data corresponding to all detected labels above.
//   optional LocationData location_data = 4;
//   // Optional string to indicate the feature generation method. Useful in
//   // associating a name to the pipeline used to generate this detection.
//   optional string feature_tag = 5;
//   // Optional string to specify track_id if detection is part of a track.
//   optional string track_id = 6;
//
//   // Optional unique id to help associate different Detections to each other.
//   optional int64 detection_id = 7;
//   // Useful for associating a detection with other detections based on the
//   // detection_id. For example, this could be used to associate a face detection
//   // with a body detection when they belong to the same person.
//   message AssociatedDetection {
//     optional int32 id = 1;
//     optional float confidence = 2;
//   }
//   repeated AssociatedDetection associated_detections = 8;
//
//   // Human-readable string for display, intended for debugging purposes. The
//   // display name corresponds to the label (or label_id). This is optional.
//   repeated string display_name = 9;
//
//   // The timestamp (in microseconds) *at which* this detection was
//   // created/detected.
//   optional int64 timestamp_usec = 10;
// }
//
// // Group of Detection protos.
// message DetectionList {
//   repeated Detection detection = 1;
// }

message WrapperHandTracking {
    optional NormalizedLandmarkList landmarks = 1;
    optional NormalizedRect rect = 2;
    optional DetectionList detection = 3;
}
