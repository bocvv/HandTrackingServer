// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapper_model.proto

#include "wrapper_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionList_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LocationData_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedLandmark_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedRect_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rasterization_wrapper_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrapper_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rasterization_Interval_wrapper_5fmodel_2eproto;
namespace mediapipe {
class LandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Landmark> _instance;
} _Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkList> _instance;
} _LandmarkList_default_instance_;
class NormalizedLandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedLandmark> _instance;
} _NormalizedLandmark_default_instance_;
class NormalizedLandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedLandmarkList> _instance;
} _NormalizedLandmarkList_default_instance_;
class NormalizedLandmarkGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedLandmarkGroup> _instance;
} _NormalizedLandmarkGroup_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class NormalizedRectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedRect> _instance;
} _NormalizedRect_default_instance_;
class Rasterization_IntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rasterization_Interval> _instance;
} _Rasterization_Interval_default_instance_;
class RasterizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rasterization> _instance;
} _Rasterization_default_instance_;
class LocationData_BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationData_BoundingBox> _instance;
} _LocationData_BoundingBox_default_instance_;
class LocationData_RelativeBoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationData_RelativeBoundingBox> _instance;
} _LocationData_RelativeBoundingBox_default_instance_;
class LocationData_BinaryMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationData_BinaryMask> _instance;
} _LocationData_BinaryMask_default_instance_;
class LocationData_RelativeKeypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationData_RelativeKeypoint> _instance;
} _LocationData_RelativeKeypoint_default_instance_;
class LocationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationData> _instance;
} _LocationData_default_instance_;
class Detection_AssociatedDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection_AssociatedDetection> _instance;
} _Detection_AssociatedDetection_default_instance_;
class DetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection> _instance;
} _Detection_default_instance_;
class DetectionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionList> _instance;
} _DetectionList_default_instance_;
class WrapperHandTrackingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperHandTracking> _instance;
} _WrapperHandTracking_default_instance_;
class WrapperMultiHandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperMultiHand> _instance;
} _WrapperMultiHand_default_instance_;
class WrapperIrisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperIris> _instance;
} _WrapperIris_default_instance_;
class WrapperFaceMeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperFaceMesh> _instance;
} _WrapperFaceMesh_default_instance_;
class WrapperUpperBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperUpperBody> _instance;
} _WrapperUpperBody_default_instance_;
class WrapperObjectTrackingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperObjectTracking> _instance;
} _WrapperObjectTracking_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_Detection_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Detection_default_instance_;
    new (ptr) ::mediapipe::Detection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Detection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Detection_wrapper_5fmodel_2eproto}, {
      &scc_info_LocationData_wrapper_5fmodel_2eproto.base,
      &scc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Detection_AssociatedDetection_default_instance_;
    new (ptr) ::mediapipe::Detection_AssociatedDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Detection_AssociatedDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_DetectionList_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_DetectionList_default_instance_;
    new (ptr) ::mediapipe::DetectionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::DetectionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionList_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetectionList_wrapper_5fmodel_2eproto}, {
      &scc_info_Detection_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Landmark_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Landmark_default_instance_;
    new (ptr) ::mediapipe::Landmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Landmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Landmark_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LandmarkList_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LandmarkList_default_instance_;
    new (ptr) ::mediapipe::LandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkList_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkList_wrapper_5fmodel_2eproto}, {
      &scc_info_Landmark_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LocationData_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_default_instance_;
    new (ptr) ::mediapipe::LocationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LocationData_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LocationData_wrapper_5fmodel_2eproto}, {
      &scc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto.base,
      &scc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto.base,
      &scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto.base,
      &scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_BinaryMask_default_instance_;
    new (ptr) ::mediapipe::LocationData_BinaryMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_BinaryMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto}, {
      &scc_info_Rasterization_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_BoundingBox_default_instance_;
    new (ptr) ::mediapipe::LocationData_BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_RelativeBoundingBox_default_instance_;
    new (ptr) ::mediapipe::LocationData_RelativeBoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_RelativeBoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_RelativeKeypoint_default_instance_;
    new (ptr) ::mediapipe::LocationData_RelativeKeypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_RelativeKeypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_NormalizedLandmark_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmark_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedLandmark_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizedLandmark_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmarkGroup_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmarkGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmarkGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmarkList_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmark_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_NormalizedRect_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedRect_default_instance_;
    new (ptr) ::mediapipe::NormalizedRect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedRect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedRect_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizedRect_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_Rasterization_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rasterization_default_instance_;
    new (ptr) ::mediapipe::Rasterization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rasterization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rasterization_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rasterization_wrapper_5fmodel_2eproto}, {
      &scc_info_Rasterization_Interval_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Rasterization_Interval_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rasterization_Interval_default_instance_;
    new (ptr) ::mediapipe::Rasterization_Interval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rasterization_Interval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rasterization_Interval_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rasterization_Interval_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_Rect_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rect_default_instance_;
    new (ptr) ::mediapipe::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rect_wrapper_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperFaceMesh_default_instance_;
    new (ptr) ::mediapipe::WrapperFaceMesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperFaceMesh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto.base,
      &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_WrapperHandTracking_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperHandTracking_default_instance_;
    new (ptr) ::mediapipe::WrapperHandTracking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperHandTracking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WrapperHandTracking_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WrapperHandTracking_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base,
      &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_WrapperIris_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperIris_default_instance_;
    new (ptr) ::mediapipe::WrapperIris();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperIris::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WrapperIris_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WrapperIris_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base,
      &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_WrapperMultiHand_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperMultiHand_default_instance_;
    new (ptr) ::mediapipe::WrapperMultiHand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperMultiHand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WrapperMultiHand_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WrapperMultiHand_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto.base,
      &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperObjectTracking_default_instance_;
    new (ptr) ::mediapipe::WrapperObjectTracking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperObjectTracking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto}, {
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_WrapperUpperBody_wrapper_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperUpperBody_default_instance_;
    new (ptr) ::mediapipe::WrapperUpperBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperUpperBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WrapperUpperBody_wrapper_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WrapperUpperBody_wrapper_5fmodel_2eproto}, {
      &scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base,
      &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
      &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_wrapper_5fmodel_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_wrapper_5fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_wrapper_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_wrapper_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, z_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarkList, landmark_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, z_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, landmark_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkGroup, landmarklist_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, x_center_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, y_center_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rect, rect_id_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, x_center_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, y_center_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedRect, rect_id_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization_Interval, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization_Interval, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization_Interval, left_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization_Interval, right_x_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Rasterization, interval_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, xmin_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, ymin_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, height_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, xmin_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, ymin_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, height_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, rasterization_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, keypoint_label_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, score_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, format_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, relative_bounding_box_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, mask_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LocationData, relative_keypoints_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, label_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, label_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, location_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, feature_tag_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, track_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, detection_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, associated_detections_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, display_name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Detection, timestamp_usec_),
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  1,
  3,
  ~0u,
  ~0u,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::DetectionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::DetectionList, detection_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperHandTracking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperHandTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperHandTracking, landmarks_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperHandTracking, rect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperHandTracking, detection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, landmarkgroup_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, rect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, detection_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperMultiHand, frame_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, eye_landmarks_left_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, eye_landmarks_right_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, iris_landmarks_left_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, iris_landmarks_right_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, rect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, detection_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperIris, frame_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, landmarkgroup_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, rect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, detection_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperFaceMesh, frame_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, landmarks_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, rect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, detection_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperUpperBody, frame_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperObjectTracking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperObjectTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperObjectTracking, detections_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::WrapperObjectTracking, frame_id_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::Landmark)},
  { 11, -1, sizeof(::mediapipe::LandmarkList)},
  { 17, 25, sizeof(::mediapipe::NormalizedLandmark)},
  { 28, -1, sizeof(::mediapipe::NormalizedLandmarkList)},
  { 34, -1, sizeof(::mediapipe::NormalizedLandmarkGroup)},
  { 40, 51, sizeof(::mediapipe::Rect)},
  { 57, 68, sizeof(::mediapipe::NormalizedRect)},
  { 74, 82, sizeof(::mediapipe::Rasterization_Interval)},
  { 85, -1, sizeof(::mediapipe::Rasterization)},
  { 91, 100, sizeof(::mediapipe::LocationData_BoundingBox)},
  { 104, 113, sizeof(::mediapipe::LocationData_RelativeBoundingBox)},
  { 117, 125, sizeof(::mediapipe::LocationData_BinaryMask)},
  { 128, 137, sizeof(::mediapipe::LocationData_RelativeKeypoint)},
  { 141, 151, sizeof(::mediapipe::LocationData)},
  { 156, 163, sizeof(::mediapipe::Detection_AssociatedDetection)},
  { 165, 180, sizeof(::mediapipe::Detection)},
  { 190, -1, sizeof(::mediapipe::DetectionList)},
  { 196, 204, sizeof(::mediapipe::WrapperHandTracking)},
  { 207, 216, sizeof(::mediapipe::WrapperMultiHand)},
  { 220, 232, sizeof(::mediapipe::WrapperIris)},
  { 239, 248, sizeof(::mediapipe::WrapperFaceMesh)},
  { 252, 261, sizeof(::mediapipe::WrapperUpperBody)},
  { 265, 272, sizeof(::mediapipe::WrapperObjectTracking)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Landmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarkList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedLandmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedLandmarkList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedLandmarkGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Rasterization_Interval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Rasterization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LocationData_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LocationData_RelativeBoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LocationData_BinaryMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LocationData_RelativeKeypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LocationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Detection_AssociatedDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Detection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_DetectionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperHandTracking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperMultiHand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperIris_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperFaceMesh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperUpperBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_WrapperObjectTracking_default_instance_),
};

const char descriptor_table_protodef_wrapper_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023wrapper_model.proto\022\tmediapipe\"+\n\010Land"
  "mark\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"5\n"
  "\014LandmarkList\022%\n\010landmark\030\001 \003(\0132\023.mediap"
  "ipe.Landmark\"5\n\022NormalizedLandmark\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"I\n\026Normalize"
  "dLandmarkList\022/\n\010landmark\030\001 \003(\0132\035.mediap"
  "ipe.NormalizedLandmark\"R\n\027NormalizedLand"
  "markGroup\0227\n\014landmarklist\030\001 \003(\0132!.mediap"
  "ipe.NormalizedLandmarkList\"o\n\004Rect\022\020\n\010x_"
  "center\030\001 \002(\005\022\020\n\010y_center\030\002 \002(\005\022\016\n\006height"
  "\030\003 \002(\005\022\r\n\005width\030\004 \002(\005\022\023\n\010rotation\030\005 \001(\002:"
  "\0010\022\017\n\007rect_id\030\006 \001(\003\"y\n\016NormalizedRect\022\020\n"
  "\010x_center\030\001 \002(\002\022\020\n\010y_center\030\002 \002(\002\022\016\n\006hei"
  "ght\030\003 \002(\002\022\r\n\005width\030\004 \002(\002\022\023\n\010rotation\030\005 \001"
  "(\002:\0010\022\017\n\007rect_id\030\006 \001(\003\"|\n\rRasterization\022"
  "3\n\010interval\030\001 \003(\0132!.mediapipe.Rasterizat"
  "ion.Interval\0326\n\010Interval\022\t\n\001y\030\001 \002(\005\022\016\n\006l"
  "eft_x\030\002 \002(\005\022\017\n\007right_x\030\003 \002(\005\"\325\005\n\014Locatio"
  "nData\022.\n\006format\030\001 \001(\0162\036.mediapipe.Locati"
  "onData.Format\0229\n\014bounding_box\030\002 \001(\0132#.me"
  "diapipe.LocationData.BoundingBox\022J\n\025rela"
  "tive_bounding_box\030\003 \001(\0132+.mediapipe.Loca"
  "tionData.RelativeBoundingBox\0220\n\004mask\030\004 \001"
  "(\0132\".mediapipe.LocationData.BinaryMask\022D"
  "\n\022relative_keypoints\030\005 \003(\0132(.mediapipe.L"
  "ocationData.RelativeKeypoint\032H\n\013Bounding"
  "Box\022\014\n\004xmin\030\001 \001(\005\022\014\n\004ymin\030\002 \001(\005\022\r\n\005width"
  "\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\032P\n\023RelativeBoundi"
  "ngBox\022\014\n\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\r\n\005wid"
  "th\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\032\\\n\nBinaryMask\022\r"
  "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022/\n\rrasteri"
  "zation\030\003 \001(\0132\030.mediapipe.Rasterization\032O"
  "\n\020RelativeKeypoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002"
  "\022\026\n\016keypoint_label\030\003 \001(\t\022\r\n\005score\030\004 \001(\002\""
  "K\n\006Format\022\n\n\006GLOBAL\020\000\022\020\n\014BOUNDING_BOX\020\001\022"
  "\031\n\025RELATIVE_BOUNDING_BOX\020\002\022\010\n\004MASK\020\003\"\336\002\n"
  "\tDetection\022\r\n\005label\030\001 \003(\t\022\024\n\010label_id\030\002 "
  "\003(\005B\002\020\001\022\021\n\005score\030\003 \003(\002B\002\020\001\022.\n\rlocation_d"
  "ata\030\004 \001(\0132\027.mediapipe.LocationData\022\023\n\013fe"
  "ature_tag\030\005 \001(\t\022\020\n\010track_id\030\006 \001(\t\022\024\n\014det"
  "ection_id\030\007 \001(\003\022G\n\025associated_detections"
  "\030\010 \003(\0132(.mediapipe.Detection.AssociatedD"
  "etection\022\024\n\014display_name\030\t \003(\t\022\026\n\016timest"
  "amp_usec\030\n \001(\003\0325\n\023AssociatedDetection\022\n\n"
  "\002id\030\001 \001(\005\022\022\n\nconfidence\030\002 \001(\002\"8\n\rDetecti"
  "onList\022\'\n\tdetection\030\001 \003(\0132\024.mediapipe.De"
  "tection\"\241\001\n\023WrapperHandTracking\0224\n\tlandm"
  "arks\030\001 \001(\0132!.mediapipe.NormalizedLandmar"
  "kList\022\'\n\004rect\030\002 \001(\0132\031.mediapipe.Normaliz"
  "edRect\022+\n\tdetection\030\003 \001(\0132\030.mediapipe.De"
  "tectionList\"\265\001\n\020WrapperMultiHand\0229\n\rland"
  "markgroup\030\001 \001(\0132\".mediapipe.NormalizedLa"
  "ndmarkGroup\022\'\n\004rect\030\002 \001(\0132\031.mediapipe.No"
  "rmalizedRect\022+\n\tdetection\030\003 \001(\0132\030.mediap"
  "ipe.DetectionList\022\020\n\010frame_id\030\004 \001(\003\"\365\002\n\013"
  "WrapperIris\022=\n\022eye_landmarks_left\030\001 \001(\0132"
  "!.mediapipe.NormalizedLandmarkList\022>\n\023ey"
  "e_landmarks_right\030\002 \001(\0132!.mediapipe.Norm"
  "alizedLandmarkList\022>\n\023iris_landmarks_lef"
  "t\030\003 \001(\0132!.mediapipe.NormalizedLandmarkLi"
  "st\022\?\n\024iris_landmarks_right\030\004 \001(\0132!.media"
  "pipe.NormalizedLandmarkList\022\'\n\004rect\030\005 \001("
  "\0132\031.mediapipe.NormalizedRect\022+\n\tdetectio"
  "n\030\006 \001(\0132\030.mediapipe.DetectionList\022\020\n\010fra"
  "me_id\030\007 \001(\003\"\264\001\n\017WrapperFaceMesh\0229\n\rlandm"
  "arkgroup\030\001 \001(\0132\".mediapipe.NormalizedLan"
  "dmarkGroup\022\'\n\004rect\030\002 \001(\0132\031.mediapipe.Nor"
  "malizedRect\022+\n\tdetection\030\003 \001(\0132\030.mediapi"
  "pe.DetectionList\022\020\n\010frame_id\030\004 \001(\003\"\260\001\n\020W"
  "rapperUpperBody\0224\n\tlandmarks\030\001 \001(\0132!.med"
  "iapipe.NormalizedLandmarkList\022\'\n\004rect\030\002 "
  "\001(\0132\031.mediapipe.NormalizedRect\022+\n\tdetect"
  "ion\030\003 \001(\0132\030.mediapipe.DetectionList\022\020\n\010f"
  "rame_id\030\004 \001(\003\"W\n\025WrapperObjectTracking\022,"
  "\n\ndetections\030\001 \001(\0132\030.mediapipe.Detection"
  "List\022\020\n\010frame_id\030\002 \001(\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_wrapper_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_wrapper_5fmodel_2eproto_sccs[23] = {
  &scc_info_Detection_wrapper_5fmodel_2eproto.base,
  &scc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto.base,
  &scc_info_DetectionList_wrapper_5fmodel_2eproto.base,
  &scc_info_Landmark_wrapper_5fmodel_2eproto.base,
  &scc_info_LandmarkList_wrapper_5fmodel_2eproto.base,
  &scc_info_LocationData_wrapper_5fmodel_2eproto.base,
  &scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto.base,
  &scc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto.base,
  &scc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto.base,
  &scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto.base,
  &scc_info_NormalizedLandmark_wrapper_5fmodel_2eproto.base,
  &scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto.base,
  &scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base,
  &scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base,
  &scc_info_Rasterization_wrapper_5fmodel_2eproto.base,
  &scc_info_Rasterization_Interval_wrapper_5fmodel_2eproto.base,
  &scc_info_Rect_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperHandTracking_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperIris_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperMultiHand_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto.base,
  &scc_info_WrapperUpperBody_wrapper_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_wrapper_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wrapper_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_wrapper_5fmodel_2eproto, "wrapper_model.proto", 3022,
  &descriptor_table_wrapper_5fmodel_2eproto_once, descriptor_table_wrapper_5fmodel_2eproto_sccs, descriptor_table_wrapper_5fmodel_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_wrapper_5fmodel_2eproto::offsets,
  file_level_metadata_wrapper_5fmodel_2eproto, 23, file_level_enum_descriptors_wrapper_5fmodel_2eproto, file_level_service_descriptors_wrapper_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_wrapper_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_wrapper_5fmodel_2eproto)), true);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationData_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wrapper_5fmodel_2eproto);
  return file_level_enum_descriptors_wrapper_5fmodel_2eproto[0];
}
bool LocationData_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LocationData_Format LocationData::GLOBAL;
constexpr LocationData_Format LocationData::BOUNDING_BOX;
constexpr LocationData_Format LocationData::RELATIVE_BOUNDING_BOX;
constexpr LocationData_Format LocationData::MASK;
constexpr LocationData_Format LocationData::Format_MIN;
constexpr LocationData_Format LocationData::Format_MAX;
constexpr int LocationData::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Landmark::InitAsDefaultInstance() {
}
class Landmark::_Internal {
 public:
  using HasBits = decltype(std::declval<Landmark>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Landmark::Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:mediapipe.Landmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Landmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Landmark::ArenaDtor(void* object) {
  Landmark* _this = reinterpret_cast< Landmark* >(object);
  (void)_this;
}
void Landmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Landmark& Landmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Landmark_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Landmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Landmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Landmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Landmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Landmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Landmark, z_)
      + sizeof(Landmark::z_)
      - PROTOBUF_FIELD_OFFSET(Landmark, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Landmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
class LandmarkList::_Internal {
 public:
};

LandmarkList::LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmark_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarkList)
}

void LandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkList_wrapper_5fmodel_2eproto.base);
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarkList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandmarkList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LandmarkList::ArenaDtor(void* object) {
  LandmarkList* _this = reinterpret_cast< LandmarkList* >(object);
  (void)_this;
}
void LandmarkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList& LandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkList_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.Landmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LandmarkList)
    MergeFrom(*source);
  }
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void LandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  landmark_.InternalSwap(&other->landmark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedLandmark::InitAsDefaultInstance() {
}
class NormalizedLandmark::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedLandmark>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NormalizedLandmark::NormalizedLandmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.NormalizedLandmark)
}
NormalizedLandmark::NormalizedLandmark(const NormalizedLandmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmark)
}

void NormalizedLandmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

NormalizedLandmark::~NormalizedLandmark() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NormalizedLandmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NormalizedLandmark::ArenaDtor(void* object) {
  NormalizedLandmark* _this = reinterpret_cast< NormalizedLandmark* >(object);
  (void)_this;
}
void NormalizedLandmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalizedLandmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedLandmark& NormalizedLandmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedLandmark_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NormalizedLandmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizedLandmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedLandmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmark)
  return target;
}

size_t NormalizedLandmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedLandmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmark)
    MergeFrom(*source);
  }
}

void NormalizedLandmark::MergeFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedLandmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmark::CopyFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmark::IsInitialized() const {
  return true;
}

void NormalizedLandmark::InternalSwap(NormalizedLandmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalizedLandmark, z_)
      + sizeof(NormalizedLandmark::z_)
      - PROTOBUF_FIELD_OFFSET(NormalizedLandmark, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedLandmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedLandmarkList::InitAsDefaultInstance() {
}
class NormalizedLandmarkList::_Internal {
 public:
};

NormalizedLandmarkList::NormalizedLandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmark_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.NormalizedLandmarkList)
}
NormalizedLandmarkList::NormalizedLandmarkList(const NormalizedLandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmarkList)
}

void NormalizedLandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base);
}

NormalizedLandmarkList::~NormalizedLandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmarkList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NormalizedLandmarkList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NormalizedLandmarkList::ArenaDtor(void* object) {
  NormalizedLandmarkList* _this = reinterpret_cast< NormalizedLandmarkList* >(object);
  (void)_this;
}
void NormalizedLandmarkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalizedLandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedLandmarkList& NormalizedLandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedLandmarkList_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NormalizedLandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizedLandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.NormalizedLandmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedLandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmarkList)
  return target;
}

size_t NormalizedLandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedLandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmarkList)
    MergeFrom(*source);
  }
}

void NormalizedLandmarkList::MergeFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void NormalizedLandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmarkList::CopyFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmarkList::IsInitialized() const {
  return true;
}

void NormalizedLandmarkList::InternalSwap(NormalizedLandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  landmark_.InternalSwap(&other->landmark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedLandmarkList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedLandmarkGroup::InitAsDefaultInstance() {
}
class NormalizedLandmarkGroup::_Internal {
 public:
};

NormalizedLandmarkGroup::NormalizedLandmarkGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmarklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.NormalizedLandmarkGroup)
}
NormalizedLandmarkGroup::NormalizedLandmarkGroup(const NormalizedLandmarkGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmarklist_(from.landmarklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmarkGroup)
}

void NormalizedLandmarkGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto.base);
}

NormalizedLandmarkGroup::~NormalizedLandmarkGroup() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmarkGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NormalizedLandmarkGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NormalizedLandmarkGroup::ArenaDtor(void* object) {
  NormalizedLandmarkGroup* _this = reinterpret_cast< NormalizedLandmarkGroup* >(object);
  (void)_this;
}
void NormalizedLandmarkGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalizedLandmarkGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedLandmarkGroup& NormalizedLandmarkGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedLandmarkGroup_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NormalizedLandmarkGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmarkGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarklist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizedLandmarkGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.NormalizedLandmarkList landmarklist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedLandmarkGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmarkGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmarkList landmarklist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmarklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmarkGroup)
  return target;
}

size_t NormalizedLandmarkGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmarkGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmarkList landmarklist = 1;
  total_size += 1UL * this->_internal_landmarklist_size();
  for (const auto& msg : this->landmarklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmarkGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmarkGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmarkGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedLandmarkGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmarkGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmarkGroup)
    MergeFrom(*source);
  }
}

void NormalizedLandmarkGroup::MergeFrom(const NormalizedLandmarkGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmarkGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarklist_.MergeFrom(from.landmarklist_);
}

void NormalizedLandmarkGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmarkGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmarkGroup::CopyFrom(const NormalizedLandmarkGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmarkGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmarkGroup::IsInitialized() const {
  return true;
}

void NormalizedLandmarkGroup::InternalSwap(NormalizedLandmarkGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  landmarklist_.InternalSwap(&other->landmarklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedLandmarkGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
class Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<Rect>()._has_bits_);
  static void set_has_x_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:mediapipe.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x_center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x_center(&has_bits);
          x_center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y_center(&has_bits);
          y_center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 rect_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rect_id(&has_bits);
          rect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_center(), target);
  }

  // required int32 y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y_center(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // required int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rotation(), target);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_rect_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.Rect)
  size_t total_size = 0;

  if (_internal_has_x_center()) {
    // required int32 x_center = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_center());
  }

  if (_internal_has_y_center()) {
    // required int32 y_center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_center());
  }

  if (_internal_has_height()) {
    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_width()) {
    // required int32 width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x_center = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_center());

    // required int32 y_center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_center());

    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required int32 width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000030u) {
    // optional int64 rect_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rect_id());
    }

    // optional float rotation = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_center_ = from.x_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_center_ = from.y_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      rect_id_ = from.rect_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, rotation_)
      + sizeof(Rect::rotation_)
      - PROTOBUF_FIELD_OFFSET(Rect, x_center_)>(
          reinterpret_cast<char*>(&x_center_),
          reinterpret_cast<char*>(&other->x_center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedRect::InitAsDefaultInstance() {
}
class NormalizedRect::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedRect>()._has_bits_);
  static void set_has_x_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

NormalizedRect::NormalizedRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.NormalizedRect)
}
NormalizedRect::NormalizedRect(const NormalizedRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedRect)
}

void NormalizedRect::SharedCtor() {
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
}

NormalizedRect::~NormalizedRect() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NormalizedRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NormalizedRect::ArenaDtor(void* object) {
  NormalizedRect* _this = reinterpret_cast< NormalizedRect* >(object);
  (void)_this;
}
void NormalizedRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalizedRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedRect& NormalizedRect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedRect_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NormalizedRect::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizedRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x_center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x_center(&has_bits);
          x_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y_center(&has_bits);
          y_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 rect_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rect_id(&has_bits);
          rect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_center(), target);
  }

  // required float y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_center(), target);
  }

  // required float height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  // required float width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_width(), target);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rotation(), target);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_rect_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedRect)
  return target;
}

size_t NormalizedRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.NormalizedRect)
  size_t total_size = 0;

  if (_internal_has_x_center()) {
    // required float x_center = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y_center()) {
    // required float y_center = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_height()) {
    // required float height = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_width()) {
    // required float width = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NormalizedRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x_center = 1;
    total_size += 1 + 4;

    // required float y_center = 2;
    total_size += 1 + 4;

    // required float height = 3;
    total_size += 1 + 4;

    // required float width = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000030u) {
    // optional int64 rect_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rect_id());
    }

    // optional float rotation = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedRect)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedRect)
    MergeFrom(*source);
  }
}

void NormalizedRect::MergeFrom(const NormalizedRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_center_ = from.x_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_center_ = from.y_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      rect_id_ = from.rect_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedRect::CopyFrom(const NormalizedRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NormalizedRect::InternalSwap(NormalizedRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalizedRect, rotation_)
      + sizeof(NormalizedRect::rotation_)
      - PROTOBUF_FIELD_OFFSET(NormalizedRect, x_center_)>(
          reinterpret_cast<char*>(&x_center_),
          reinterpret_cast<char*>(&other->x_center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rasterization_Interval::InitAsDefaultInstance() {
}
class Rasterization_Interval::_Internal {
 public:
  using HasBits = decltype(std::declval<Rasterization_Interval>()._has_bits_);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Rasterization_Interval::Rasterization_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Rasterization.Interval)
}
Rasterization_Interval::Rasterization_Interval(const Rasterization_Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&y_, &from.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_x_) -
    reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rasterization.Interval)
}

void Rasterization_Interval::SharedCtor() {
  ::memset(&y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_x_) -
      reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
}

Rasterization_Interval::~Rasterization_Interval() {
  // @@protoc_insertion_point(destructor:mediapipe.Rasterization.Interval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rasterization_Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rasterization_Interval::ArenaDtor(void* object) {
  Rasterization_Interval* _this = reinterpret_cast< Rasterization_Interval* >(object);
  (void)_this;
}
void Rasterization_Interval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rasterization_Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rasterization_Interval& Rasterization_Interval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rasterization_Interval_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Rasterization_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rasterization.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_x_) -
        reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rasterization_Interval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 left_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_left_x(&has_bits);
          left_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 right_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_right_x(&has_bits);
          right_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rasterization_Interval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rasterization.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 y = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_y(), target);
  }

  // required int32 left_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_x(), target);
  }

  // required int32 right_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_right_x(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rasterization.Interval)
  return target;
}

size_t Rasterization_Interval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.Rasterization.Interval)
  size_t total_size = 0;

  if (_internal_has_y()) {
    // required int32 y = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (_internal_has_left_x()) {
    // required int32 left_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_x());
  }

  if (_internal_has_right_x()) {
    // required int32 right_x = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_x());
  }

  return total_size;
}
size_t Rasterization_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rasterization.Interval)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 y = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

    // required int32 left_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_x());

    // required int32 right_x = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_x());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rasterization_Interval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rasterization.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const Rasterization_Interval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rasterization_Interval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rasterization.Interval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rasterization.Interval)
    MergeFrom(*source);
  }
}

void Rasterization_Interval::MergeFrom(const Rasterization_Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rasterization.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_x_ = from.left_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_x_ = from.right_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rasterization_Interval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rasterization.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rasterization_Interval::CopyFrom(const Rasterization_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rasterization.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rasterization_Interval::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Rasterization_Interval::InternalSwap(Rasterization_Interval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rasterization_Interval, right_x_)
      + sizeof(Rasterization_Interval::right_x_)
      - PROTOBUF_FIELD_OFFSET(Rasterization_Interval, y_)>(
          reinterpret_cast<char*>(&y_),
          reinterpret_cast<char*>(&other->y_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rasterization_Interval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rasterization::InitAsDefaultInstance() {
}
class Rasterization::_Internal {
 public:
};

Rasterization::Rasterization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interval_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Rasterization)
}
Rasterization::Rasterization(const Rasterization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interval_(from.interval_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rasterization)
}

void Rasterization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rasterization_wrapper_5fmodel_2eproto.base);
}

Rasterization::~Rasterization() {
  // @@protoc_insertion_point(destructor:mediapipe.Rasterization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rasterization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rasterization::ArenaDtor(void* object) {
  Rasterization* _this = reinterpret_cast< Rasterization* >(object);
  (void)_this;
}
void Rasterization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rasterization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rasterization& Rasterization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rasterization_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Rasterization::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rasterization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interval_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rasterization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.Rasterization.Interval interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interval(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rasterization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rasterization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Rasterization.Interval interval = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interval_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interval(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rasterization)
  return target;
}

size_t Rasterization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rasterization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.Rasterization.Interval interval = 1;
  total_size += 1UL * this->_internal_interval_size();
  for (const auto& msg : this->interval_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rasterization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rasterization)
  GOOGLE_DCHECK_NE(&from, this);
  const Rasterization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rasterization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rasterization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rasterization)
    MergeFrom(*source);
  }
}

void Rasterization::MergeFrom(const Rasterization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rasterization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interval_.MergeFrom(from.interval_);
}

void Rasterization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rasterization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rasterization::CopyFrom(const Rasterization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rasterization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rasterization::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(interval_)) return false;
  return true;
}

void Rasterization::InternalSwap(Rasterization* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interval_.InternalSwap(&other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rasterization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationData_BoundingBox::InitAsDefaultInstance() {
}
class LocationData_BoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationData_BoundingBox>()._has_bits_);
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LocationData_BoundingBox::LocationData_BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LocationData.BoundingBox)
}
LocationData_BoundingBox::LocationData_BoundingBox(const LocationData_BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.BoundingBox)
}

void LocationData_BoundingBox::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
}

LocationData_BoundingBox::~LocationData_BoundingBox() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.BoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationData_BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocationData_BoundingBox::ArenaDtor(void* object) {
  LocationData_BoundingBox* _this = reinterpret_cast< LocationData_BoundingBox* >(object);
  (void)_this;
}
void LocationData_BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationData_BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationData_BoundingBox& LocationData_BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationData_BoundingBox_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LocationData_BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationData_BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_xmin(&has_bits);
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ymin(&has_bits);
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationData_BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_xmin(), target);
  }

  // optional int32 ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ymin(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.BoundingBox)
  return target;
}

size_t LocationData_BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_xmin());
    }

    // optional int32 ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ymin());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationData_BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.BoundingBox)
    MergeFrom(*source);
  }
}

void LocationData_BoundingBox::MergeFrom(const LocationData_BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_BoundingBox::CopyFrom(const LocationData_BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_BoundingBox::IsInitialized() const {
  return true;
}

void LocationData_BoundingBox::InternalSwap(LocationData_BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationData_BoundingBox, height_)
      + sizeof(LocationData_BoundingBox::height_)
      - PROTOBUF_FIELD_OFFSET(LocationData_BoundingBox, xmin_)>(
          reinterpret_cast<char*>(&xmin_),
          reinterpret_cast<char*>(&other->xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationData_BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationData_RelativeBoundingBox::InitAsDefaultInstance() {
}
class LocationData_RelativeBoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationData_RelativeBoundingBox>()._has_bits_);
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LocationData_RelativeBoundingBox::LocationData_RelativeBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LocationData.RelativeBoundingBox)
}
LocationData_RelativeBoundingBox::LocationData_RelativeBoundingBox(const LocationData_RelativeBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.RelativeBoundingBox)
}

void LocationData_RelativeBoundingBox::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
}

LocationData_RelativeBoundingBox::~LocationData_RelativeBoundingBox() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.RelativeBoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationData_RelativeBoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocationData_RelativeBoundingBox::ArenaDtor(void* object) {
  LocationData_RelativeBoundingBox* _this = reinterpret_cast< LocationData_RelativeBoundingBox* >(object);
  (void)_this;
}
void LocationData_RelativeBoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationData_RelativeBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationData_RelativeBoundingBox& LocationData_RelativeBoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationData_RelativeBoundingBox_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LocationData_RelativeBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.RelativeBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationData_RelativeBoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_xmin(&has_bits);
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ymin(&has_bits);
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationData_RelativeBoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.RelativeBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ymin(), target);
  }

  // optional float width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // optional float height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.RelativeBoundingBox)
  return target;
}

size_t LocationData_RelativeBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.RelativeBoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_RelativeBoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.RelativeBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_RelativeBoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationData_RelativeBoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.RelativeBoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.RelativeBoundingBox)
    MergeFrom(*source);
  }
}

void LocationData_RelativeBoundingBox::MergeFrom(const LocationData_RelativeBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.RelativeBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_RelativeBoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.RelativeBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_RelativeBoundingBox::CopyFrom(const LocationData_RelativeBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.RelativeBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_RelativeBoundingBox::IsInitialized() const {
  return true;
}

void LocationData_RelativeBoundingBox::InternalSwap(LocationData_RelativeBoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationData_RelativeBoundingBox, height_)
      + sizeof(LocationData_RelativeBoundingBox::height_)
      - PROTOBUF_FIELD_OFFSET(LocationData_RelativeBoundingBox, xmin_)>(
          reinterpret_cast<char*>(&xmin_),
          reinterpret_cast<char*>(&other->xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationData_RelativeBoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationData_BinaryMask::InitAsDefaultInstance() {
  ::mediapipe::_LocationData_BinaryMask_default_instance_._instance.get_mutable()->rasterization_ = const_cast< ::mediapipe::Rasterization*>(
      ::mediapipe::Rasterization::internal_default_instance());
}
class LocationData_BinaryMask::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationData_BinaryMask>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::Rasterization& rasterization(const LocationData_BinaryMask* msg);
  static void set_has_rasterization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::Rasterization&
LocationData_BinaryMask::_Internal::rasterization(const LocationData_BinaryMask* msg) {
  return *msg->rasterization_;
}
LocationData_BinaryMask::LocationData_BinaryMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LocationData.BinaryMask)
}
LocationData_BinaryMask::LocationData_BinaryMask(const LocationData_BinaryMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rasterization()) {
    rasterization_ = new ::mediapipe::Rasterization(*from.rasterization_);
  } else {
    rasterization_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.BinaryMask)
}

void LocationData_BinaryMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto.base);
  ::memset(&rasterization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&rasterization_)) + sizeof(height_));
}

LocationData_BinaryMask::~LocationData_BinaryMask() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.BinaryMask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationData_BinaryMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rasterization_;
}

void LocationData_BinaryMask::ArenaDtor(void* object) {
  LocationData_BinaryMask* _this = reinterpret_cast< LocationData_BinaryMask* >(object);
  (void)_this;
}
void LocationData_BinaryMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationData_BinaryMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationData_BinaryMask& LocationData_BinaryMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationData_BinaryMask_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LocationData_BinaryMask::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.BinaryMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rasterization_ != nullptr);
    rasterization_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationData_BinaryMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Rasterization rasterization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rasterization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationData_BinaryMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.BinaryMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional .mediapipe.Rasterization rasterization = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rasterization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.BinaryMask)
  return target;
}

size_t LocationData_BinaryMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.BinaryMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mediapipe.Rasterization rasterization = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rasterization_);
    }

    // optional int32 width = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_BinaryMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.BinaryMask)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_BinaryMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationData_BinaryMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.BinaryMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.BinaryMask)
    MergeFrom(*source);
  }
}

void LocationData_BinaryMask::MergeFrom(const LocationData_BinaryMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.BinaryMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rasterization()->::mediapipe::Rasterization::MergeFrom(from._internal_rasterization());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_BinaryMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.BinaryMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_BinaryMask::CopyFrom(const LocationData_BinaryMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.BinaryMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_BinaryMask::IsInitialized() const {
  if (_internal_has_rasterization()) {
    if (!rasterization_->IsInitialized()) return false;
  }
  return true;
}

void LocationData_BinaryMask::InternalSwap(LocationData_BinaryMask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationData_BinaryMask, height_)
      + sizeof(LocationData_BinaryMask::height_)
      - PROTOBUF_FIELD_OFFSET(LocationData_BinaryMask, rasterization_)>(
          reinterpret_cast<char*>(&rasterization_),
          reinterpret_cast<char*>(&other->rasterization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationData_BinaryMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationData_RelativeKeypoint::InitAsDefaultInstance() {
}
class LocationData_RelativeKeypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationData_RelativeKeypoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keypoint_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LocationData_RelativeKeypoint::LocationData_RelativeKeypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LocationData.RelativeKeypoint)
}
LocationData_RelativeKeypoint::LocationData_RelativeKeypoint(const LocationData_RelativeKeypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keypoint_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keypoint_label()) {
    keypoint_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keypoint_label(),
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&x_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.RelativeKeypoint)
}

void LocationData_RelativeKeypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto.base);
  keypoint_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&x_)) + sizeof(score_));
}

LocationData_RelativeKeypoint::~LocationData_RelativeKeypoint() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.RelativeKeypoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationData_RelativeKeypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  keypoint_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationData_RelativeKeypoint::ArenaDtor(void* object) {
  LocationData_RelativeKeypoint* _this = reinterpret_cast< LocationData_RelativeKeypoint* >(object);
  (void)_this;
}
void LocationData_RelativeKeypoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationData_RelativeKeypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationData_RelativeKeypoint& LocationData_RelativeKeypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationData_RelativeKeypoint_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LocationData_RelativeKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.RelativeKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keypoint_label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&x_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationData_RelativeKeypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string keypoint_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_keypoint_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.LocationData.RelativeKeypoint.keypoint_label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationData_RelativeKeypoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.RelativeKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional string keypoint_label = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keypoint_label().data(), static_cast<int>(this->_internal_keypoint_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.LocationData.RelativeKeypoint.keypoint_label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_keypoint_label(), target);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.RelativeKeypoint)
  return target;
}

size_t LocationData_RelativeKeypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.RelativeKeypoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string keypoint_label = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keypoint_label());
    }

    // optional float x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_RelativeKeypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.RelativeKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_RelativeKeypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationData_RelativeKeypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.RelativeKeypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.RelativeKeypoint)
    MergeFrom(*source);
  }
}

void LocationData_RelativeKeypoint::MergeFrom(const LocationData_RelativeKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.RelativeKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_keypoint_label(from._internal_keypoint_label());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_RelativeKeypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.RelativeKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_RelativeKeypoint::CopyFrom(const LocationData_RelativeKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.RelativeKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_RelativeKeypoint::IsInitialized() const {
  return true;
}

void LocationData_RelativeKeypoint::InternalSwap(LocationData_RelativeKeypoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keypoint_label_.Swap(&other->keypoint_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationData_RelativeKeypoint, score_)
      + sizeof(LocationData_RelativeKeypoint::score_)
      - PROTOBUF_FIELD_OFFSET(LocationData_RelativeKeypoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationData_RelativeKeypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationData::InitAsDefaultInstance() {
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::mediapipe::LocationData_BoundingBox*>(
      ::mediapipe::LocationData_BoundingBox::internal_default_instance());
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->relative_bounding_box_ = const_cast< ::mediapipe::LocationData_RelativeBoundingBox*>(
      ::mediapipe::LocationData_RelativeBoundingBox::internal_default_instance());
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->mask_ = const_cast< ::mediapipe::LocationData_BinaryMask*>(
      ::mediapipe::LocationData_BinaryMask::internal_default_instance());
}
class LocationData::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationData>()._has_bits_);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::LocationData_BoundingBox& bounding_box(const LocationData* msg);
  static void set_has_bounding_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::LocationData_RelativeBoundingBox& relative_bounding_box(const LocationData* msg);
  static void set_has_relative_bounding_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::LocationData_BinaryMask& mask(const LocationData* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::LocationData_BoundingBox&
LocationData::_Internal::bounding_box(const LocationData* msg) {
  return *msg->bounding_box_;
}
const ::mediapipe::LocationData_RelativeBoundingBox&
LocationData::_Internal::relative_bounding_box(const LocationData* msg) {
  return *msg->relative_bounding_box_;
}
const ::mediapipe::LocationData_BinaryMask&
LocationData::_Internal::mask(const LocationData* msg) {
  return *msg->mask_;
}
LocationData::LocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relative_keypoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LocationData)
}
LocationData::LocationData(const LocationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      relative_keypoints_(from.relative_keypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounding_box()) {
    bounding_box_ = new ::mediapipe::LocationData_BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  if (from._internal_has_relative_bounding_box()) {
    relative_bounding_box_ = new ::mediapipe::LocationData_RelativeBoundingBox(*from.relative_bounding_box_);
  } else {
    relative_bounding_box_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::mediapipe::LocationData_BinaryMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData)
}

void LocationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationData_wrapper_5fmodel_2eproto.base);
  ::memset(&bounding_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&bounding_box_)) + sizeof(format_));
}

LocationData::~LocationData() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete relative_bounding_box_;
  if (this != internal_default_instance()) delete mask_;
}

void LocationData::ArenaDtor(void* object) {
  LocationData* _this = reinterpret_cast< LocationData* >(object);
  (void)_this;
}
void LocationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationData& LocationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationData_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_keypoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bounding_box_ != nullptr);
      bounding_box_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relative_bounding_box_ != nullptr);
      relative_bounding_box_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mask_ != nullptr);
      mask_->Clear();
    }
  }
  format_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.LocationData.Format format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::LocationData_Format_IsValid(val))) {
            _internal_set_format(static_cast<::mediapipe::LocationData_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.LocationData.BinaryMask mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relative_keypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData.Format format = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bounding_box(this), target, stream);
  }

  // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relative_bounding_box(this), target, stream);
  }

  // optional .mediapipe.LocationData.BinaryMask mask = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mask(this), target, stream);
  }

  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relative_keypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_relative_keypoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData)
  return target;
}

size_t LocationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  total_size += 1UL * this->_internal_relative_keypoints_size();
  for (const auto& msg : this->relative_keypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounding_box_);
    }

    // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_bounding_box_);
    }

    // optional .mediapipe.LocationData.BinaryMask mask = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mask_);
    }

    // optional .mediapipe.LocationData.Format format = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData)
    MergeFrom(*source);
  }
}

void LocationData::MergeFrom(const LocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_keypoints_.MergeFrom(from.relative_keypoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bounding_box()->::mediapipe::LocationData_BoundingBox::MergeFrom(from._internal_bounding_box());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relative_bounding_box()->::mediapipe::LocationData_RelativeBoundingBox::MergeFrom(from._internal_relative_bounding_box());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mask()->::mediapipe::LocationData_BinaryMask::MergeFrom(from._internal_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData::CopyFrom(const LocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData::IsInitialized() const {
  if (_internal_has_mask()) {
    if (!mask_->IsInitialized()) return false;
  }
  return true;
}

void LocationData::InternalSwap(LocationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relative_keypoints_.InternalSwap(&other->relative_keypoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationData, format_)
      + sizeof(LocationData::format_)
      - PROTOBUF_FIELD_OFFSET(LocationData, bounding_box_)>(
          reinterpret_cast<char*>(&bounding_box_),
          reinterpret_cast<char*>(&other->bounding_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detection_AssociatedDetection::InitAsDefaultInstance() {
}
class Detection_AssociatedDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<Detection_AssociatedDetection>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Detection_AssociatedDetection::Detection_AssociatedDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Detection.AssociatedDetection)
}
Detection_AssociatedDetection::Detection_AssociatedDetection(const Detection_AssociatedDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Detection.AssociatedDetection)
}

void Detection_AssociatedDetection::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
}

Detection_AssociatedDetection::~Detection_AssociatedDetection() {
  // @@protoc_insertion_point(destructor:mediapipe.Detection.AssociatedDetection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection_AssociatedDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Detection_AssociatedDetection::ArenaDtor(void* object) {
  Detection_AssociatedDetection* _this = reinterpret_cast< Detection_AssociatedDetection* >(object);
  (void)_this;
}
void Detection_AssociatedDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection_AssociatedDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection_AssociatedDetection& Detection_AssociatedDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection_AssociatedDetection_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Detection_AssociatedDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Detection.AssociatedDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection_AssociatedDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection_AssociatedDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Detection.AssociatedDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Detection.AssociatedDetection)
  return target;
}

size_t Detection_AssociatedDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Detection.AssociatedDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional float confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection_AssociatedDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Detection.AssociatedDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection_AssociatedDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection_AssociatedDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Detection.AssociatedDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Detection.AssociatedDetection)
    MergeFrom(*source);
  }
}

void Detection_AssociatedDetection::MergeFrom(const Detection_AssociatedDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Detection.AssociatedDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detection_AssociatedDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Detection.AssociatedDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection_AssociatedDetection::CopyFrom(const Detection_AssociatedDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Detection.AssociatedDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection_AssociatedDetection::IsInitialized() const {
  return true;
}

void Detection_AssociatedDetection::InternalSwap(Detection_AssociatedDetection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection_AssociatedDetection, confidence_)
      + sizeof(Detection_AssociatedDetection::confidence_)
      - PROTOBUF_FIELD_OFFSET(Detection_AssociatedDetection, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection_AssociatedDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detection::InitAsDefaultInstance() {
  ::mediapipe::_Detection_default_instance_._instance.get_mutable()->location_data_ = const_cast< ::mediapipe::LocationData*>(
      ::mediapipe::LocationData::internal_default_instance());
}
class Detection::_Internal {
 public:
  using HasBits = decltype(std::declval<Detection>()._has_bits_);
  static const ::mediapipe::LocationData& location_data(const Detection* msg);
  static void set_has_location_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_feature_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mediapipe::LocationData&
Detection::_Internal::location_data(const Detection* msg) {
  return *msg->location_data_;
}
Detection::Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena),
  label_id_(arena),
  score_(arena),
  associated_detections_(arena),
  display_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Detection)
}
Detection::Detection(const Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      label_(from.label_),
      label_id_(from.label_id_),
      score_(from.score_),
      associated_detections_(from.associated_detections_),
      display_name_(from.display_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feature_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_feature_tag()) {
    feature_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_feature_tag(),
      GetArena());
  }
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_track_id()) {
    track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_track_id(),
      GetArena());
  }
  if (from._internal_has_location_data()) {
    location_data_ = new ::mediapipe::LocationData(*from.location_data_);
  } else {
    location_data_ = nullptr;
  }
  ::memcpy(&detection_id_, &from.detection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_usec_) -
    reinterpret_cast<char*>(&detection_id_)) + sizeof(timestamp_usec_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Detection)
}

void Detection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection_wrapper_5fmodel_2eproto.base);
  feature_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_usec_) -
      reinterpret_cast<char*>(&location_data_)) + sizeof(timestamp_usec_));
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:mediapipe.Detection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  feature_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_data_;
}

void Detection::ArenaDtor(void* object) {
  Detection* _this = reinterpret_cast< Detection* >(object);
  (void)_this;
}
void Detection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection& Detection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  label_id_.Clear();
  score_.Clear();
  associated_detections_.Clear();
  display_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      feature_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      track_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_data_ != nullptr);
      location_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&detection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_usec_) -
        reinterpret_cast<char*>(&detection_id_)) + sizeof(timestamp_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_label();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.Detection.label");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 label_id = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_label_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_label_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float score = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.LocationData location_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string feature_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_feature_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.Detection.feature_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string track_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_track_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.Detection.track_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 detection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_detection_id(&has_bits);
          detection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associated_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string display_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_display_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.Detection.display_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_usec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->_internal_label_size(); i < n; i++) {
    const auto& s = this->_internal_label(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.label");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 label_id = 2 [packed = true];
  {
    int byte_size = _label_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_label_id(), byte_size, target);
    }
  }

  // repeated float score = 3 [packed = true];
  if (this->_internal_score_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_score(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData location_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location_data(this), target, stream);
  }

  // optional string feature_tag = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feature_tag().data(), static_cast<int>(this->_internal_feature_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.feature_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_feature_tag(), target);
  }

  // optional string track_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.track_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_track_id(), target);
  }

  // optional int64 detection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_detection_id(), target);
  }

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associated_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_associated_detections(i), target, stream);
  }

  // repeated string display_name = 9;
  for (int i = 0, n = this->_internal_display_name_size(); i < n; i++) {
    const auto& s = this->_internal_display_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.display_name");
    target = stream->WriteString(9, s, target);
  }

  // optional int64 timestamp_usec = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Detection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string label = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(label_.size());
  for (int i = 0, n = label_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      label_.Get(i));
  }

  // repeated int32 label_id = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->label_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _label_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float score = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_score_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  total_size += 1UL * this->_internal_associated_detections_size();
  for (const auto& msg : this->associated_detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string display_name = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(display_name_.size());
  for (int i = 0, n = display_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      display_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string feature_tag = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature_tag());
    }

    // optional string track_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_id());
    }

    // optional .mediapipe.LocationData location_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_data_);
    }

    // optional int64 detection_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_detection_id());
    }

    // optional int64 timestamp_usec = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_usec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Detection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Detection)
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  label_id_.MergeFrom(from.label_id_);
  score_.MergeFrom(from.score_);
  associated_detections_.MergeFrom(from.associated_detections_);
  display_name_.MergeFrom(from.display_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_feature_tag(from._internal_feature_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_track_id(from._internal_track_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_location_data()->::mediapipe::LocationData::MergeFrom(from._internal_location_data());
    }
    if (cached_has_bits & 0x00000008u) {
      detection_id_ = from.detection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  if (_internal_has_location_data()) {
    if (!location_data_->IsInitialized()) return false;
  }
  return true;
}

void Detection::InternalSwap(Detection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.InternalSwap(&other->label_);
  label_id_.InternalSwap(&other->label_id_);
  score_.InternalSwap(&other->score_);
  associated_detections_.InternalSwap(&other->associated_detections_);
  display_name_.InternalSwap(&other->display_name_);
  feature_tag_.Swap(&other->feature_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  track_id_.Swap(&other->track_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection, timestamp_usec_)
      + sizeof(Detection::timestamp_usec_)
      - PROTOBUF_FIELD_OFFSET(Detection, location_data_)>(
          reinterpret_cast<char*>(&location_data_),
          reinterpret_cast<char*>(&other->location_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionList::InitAsDefaultInstance() {
}
class DetectionList::_Internal {
 public:
};

DetectionList::DetectionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.DetectionList)
}
DetectionList::DetectionList(const DetectionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detection_(from.detection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.DetectionList)
}

void DetectionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionList_wrapper_5fmodel_2eproto.base);
}

DetectionList::~DetectionList() {
  // @@protoc_insertion_point(destructor:mediapipe.DetectionList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetectionList::ArenaDtor(void* object) {
  DetectionList* _this = reinterpret_cast< DetectionList* >(object);
  (void)_this;
}
void DetectionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionList& DetectionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionList_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DetectionList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.DetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.Detection detection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.DetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Detection detection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_detection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.DetectionList)
  return target;
}

size_t DetectionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.DetectionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.Detection detection = 1;
  total_size += 1UL * this->_internal_detection_size();
  for (const auto& msg : this->detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.DetectionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.DetectionList)
    MergeFrom(*source);
  }
}

void DetectionList::MergeFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
}

void DetectionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionList::CopyFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(detection_)) return false;
  return true;
}

void DetectionList::InternalSwap(DetectionList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detection_.InternalSwap(&other->detection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperHandTracking::InitAsDefaultInstance() {
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->landmarks_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperHandTracking::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperHandTracking>()._has_bits_);
  static const ::mediapipe::NormalizedLandmarkList& landmarks(const WrapperHandTracking* msg);
  static void set_has_landmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::NormalizedRect& rect(const WrapperHandTracking* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::DetectionList& detection(const WrapperHandTracking* msg);
  static void set_has_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::NormalizedLandmarkList&
WrapperHandTracking::_Internal::landmarks(const WrapperHandTracking* msg) {
  return *msg->landmarks_;
}
const ::mediapipe::NormalizedRect&
WrapperHandTracking::_Internal::rect(const WrapperHandTracking* msg) {
  return *msg->rect_;
}
const ::mediapipe::DetectionList&
WrapperHandTracking::_Internal::detection(const WrapperHandTracking* msg) {
  return *msg->detection_;
}
WrapperHandTracking::WrapperHandTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperHandTracking)
}
WrapperHandTracking::WrapperHandTracking(const WrapperHandTracking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_landmarks()) {
    landmarks_ = new ::mediapipe::NormalizedLandmarkList(*from.landmarks_);
  } else {
    landmarks_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperHandTracking)
}

void WrapperHandTracking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperHandTracking_wrapper_5fmodel_2eproto.base);
  ::memset(&landmarks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_) -
      reinterpret_cast<char*>(&landmarks_)) + sizeof(detection_));
}

WrapperHandTracking::~WrapperHandTracking() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperHandTracking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperHandTracking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete landmarks_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperHandTracking::ArenaDtor(void* object) {
  WrapperHandTracking* _this = reinterpret_cast< WrapperHandTracking* >(object);
  (void)_this;
}
void WrapperHandTracking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperHandTracking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperHandTracking& WrapperHandTracking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperHandTracking_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperHandTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperHandTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landmarks_ != nullptr);
      landmarks_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperHandTracking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedRect rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.DetectionList detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperHandTracking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperHandTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landmarks(this), target, stream);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rect(this), target, stream);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperHandTracking)
  return target;
}

size_t WrapperHandTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperHandTracking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *landmarks_);
    }

    // optional .mediapipe.NormalizedRect rect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperHandTracking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperHandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperHandTracking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperHandTracking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperHandTracking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperHandTracking)
    MergeFrom(*source);
  }
}

void WrapperHandTracking::MergeFrom(const WrapperHandTracking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperHandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_landmarks()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_landmarks());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection()->::mediapipe::DetectionList::MergeFrom(from._internal_detection());
    }
  }
}

void WrapperHandTracking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperHandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperHandTracking::CopyFrom(const WrapperHandTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperHandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperHandTracking::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_detection()) {
    if (!detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperHandTracking::InternalSwap(WrapperHandTracking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperHandTracking, detection_)
      + sizeof(WrapperHandTracking::detection_)
      - PROTOBUF_FIELD_OFFSET(WrapperHandTracking, landmarks_)>(
          reinterpret_cast<char*>(&landmarks_),
          reinterpret_cast<char*>(&other->landmarks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperHandTracking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperMultiHand::InitAsDefaultInstance() {
  ::mediapipe::_WrapperMultiHand_default_instance_._instance.get_mutable()->landmarkgroup_ = const_cast< ::mediapipe::NormalizedLandmarkGroup*>(
      ::mediapipe::NormalizedLandmarkGroup::internal_default_instance());
  ::mediapipe::_WrapperMultiHand_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperMultiHand_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperMultiHand::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperMultiHand>()._has_bits_);
  static const ::mediapipe::NormalizedLandmarkGroup& landmarkgroup(const WrapperMultiHand* msg);
  static void set_has_landmarkgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::NormalizedRect& rect(const WrapperMultiHand* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::DetectionList& detection(const WrapperMultiHand* msg);
  static void set_has_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::NormalizedLandmarkGroup&
WrapperMultiHand::_Internal::landmarkgroup(const WrapperMultiHand* msg) {
  return *msg->landmarkgroup_;
}
const ::mediapipe::NormalizedRect&
WrapperMultiHand::_Internal::rect(const WrapperMultiHand* msg) {
  return *msg->rect_;
}
const ::mediapipe::DetectionList&
WrapperMultiHand::_Internal::detection(const WrapperMultiHand* msg) {
  return *msg->detection_;
}
WrapperMultiHand::WrapperMultiHand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperMultiHand)
}
WrapperMultiHand::WrapperMultiHand(const WrapperMultiHand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_landmarkgroup()) {
    landmarkgroup_ = new ::mediapipe::NormalizedLandmarkGroup(*from.landmarkgroup_);
  } else {
    landmarkgroup_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperMultiHand)
}

void WrapperMultiHand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperMultiHand_wrapper_5fmodel_2eproto.base);
  ::memset(&landmarkgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&landmarkgroup_)) + sizeof(frame_id_));
}

WrapperMultiHand::~WrapperMultiHand() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperMultiHand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperMultiHand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete landmarkgroup_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperMultiHand::ArenaDtor(void* object) {
  WrapperMultiHand* _this = reinterpret_cast< WrapperMultiHand* >(object);
  (void)_this;
}
void WrapperMultiHand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperMultiHand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperMultiHand& WrapperMultiHand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperMultiHand_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperMultiHand::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperMultiHand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landmarkgroup_ != nullptr);
      landmarkgroup_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
  }
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperMultiHand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmarkgroup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedRect rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.DetectionList detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperMultiHand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperMultiHand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landmarkgroup(this), target, stream);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rect(this), target, stream);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detection(this), target, stream);
  }

  // optional int64 frame_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperMultiHand)
  return target;
}

size_t WrapperMultiHand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperMultiHand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *landmarkgroup_);
    }

    // optional .mediapipe.NormalizedRect rect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_);
    }

    // optional int64 frame_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperMultiHand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperMultiHand)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperMultiHand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperMultiHand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperMultiHand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperMultiHand)
    MergeFrom(*source);
  }
}

void WrapperMultiHand::MergeFrom(const WrapperMultiHand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperMultiHand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_landmarkgroup()->::mediapipe::NormalizedLandmarkGroup::MergeFrom(from._internal_landmarkgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection()->::mediapipe::DetectionList::MergeFrom(from._internal_detection());
    }
    if (cached_has_bits & 0x00000008u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WrapperMultiHand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperMultiHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperMultiHand::CopyFrom(const WrapperMultiHand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperMultiHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperMultiHand::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_detection()) {
    if (!detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperMultiHand::InternalSwap(WrapperMultiHand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperMultiHand, frame_id_)
      + sizeof(WrapperMultiHand::frame_id_)
      - PROTOBUF_FIELD_OFFSET(WrapperMultiHand, landmarkgroup_)>(
          reinterpret_cast<char*>(&landmarkgroup_),
          reinterpret_cast<char*>(&other->landmarkgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperMultiHand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperIris::InitAsDefaultInstance() {
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->eye_landmarks_left_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->eye_landmarks_right_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->iris_landmarks_left_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->iris_landmarks_right_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperIris_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperIris::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperIris>()._has_bits_);
  static const ::mediapipe::NormalizedLandmarkList& eye_landmarks_left(const WrapperIris* msg);
  static void set_has_eye_landmarks_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::NormalizedLandmarkList& eye_landmarks_right(const WrapperIris* msg);
  static void set_has_eye_landmarks_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::NormalizedLandmarkList& iris_landmarks_left(const WrapperIris* msg);
  static void set_has_iris_landmarks_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::NormalizedLandmarkList& iris_landmarks_right(const WrapperIris* msg);
  static void set_has_iris_landmarks_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::NormalizedRect& rect(const WrapperIris* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mediapipe::DetectionList& detection(const WrapperIris* msg);
  static void set_has_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::mediapipe::NormalizedLandmarkList&
WrapperIris::_Internal::eye_landmarks_left(const WrapperIris* msg) {
  return *msg->eye_landmarks_left_;
}
const ::mediapipe::NormalizedLandmarkList&
WrapperIris::_Internal::eye_landmarks_right(const WrapperIris* msg) {
  return *msg->eye_landmarks_right_;
}
const ::mediapipe::NormalizedLandmarkList&
WrapperIris::_Internal::iris_landmarks_left(const WrapperIris* msg) {
  return *msg->iris_landmarks_left_;
}
const ::mediapipe::NormalizedLandmarkList&
WrapperIris::_Internal::iris_landmarks_right(const WrapperIris* msg) {
  return *msg->iris_landmarks_right_;
}
const ::mediapipe::NormalizedRect&
WrapperIris::_Internal::rect(const WrapperIris* msg) {
  return *msg->rect_;
}
const ::mediapipe::DetectionList&
WrapperIris::_Internal::detection(const WrapperIris* msg) {
  return *msg->detection_;
}
WrapperIris::WrapperIris(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperIris)
}
WrapperIris::WrapperIris(const WrapperIris& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eye_landmarks_left()) {
    eye_landmarks_left_ = new ::mediapipe::NormalizedLandmarkList(*from.eye_landmarks_left_);
  } else {
    eye_landmarks_left_ = nullptr;
  }
  if (from._internal_has_eye_landmarks_right()) {
    eye_landmarks_right_ = new ::mediapipe::NormalizedLandmarkList(*from.eye_landmarks_right_);
  } else {
    eye_landmarks_right_ = nullptr;
  }
  if (from._internal_has_iris_landmarks_left()) {
    iris_landmarks_left_ = new ::mediapipe::NormalizedLandmarkList(*from.iris_landmarks_left_);
  } else {
    iris_landmarks_left_ = nullptr;
  }
  if (from._internal_has_iris_landmarks_right()) {
    iris_landmarks_right_ = new ::mediapipe::NormalizedLandmarkList(*from.iris_landmarks_right_);
  } else {
    iris_landmarks_right_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperIris)
}

void WrapperIris::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperIris_wrapper_5fmodel_2eproto.base);
  ::memset(&eye_landmarks_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&eye_landmarks_left_)) + sizeof(frame_id_));
}

WrapperIris::~WrapperIris() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperIris)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperIris::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eye_landmarks_left_;
  if (this != internal_default_instance()) delete eye_landmarks_right_;
  if (this != internal_default_instance()) delete iris_landmarks_left_;
  if (this != internal_default_instance()) delete iris_landmarks_right_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperIris::ArenaDtor(void* object) {
  WrapperIris* _this = reinterpret_cast< WrapperIris* >(object);
  (void)_this;
}
void WrapperIris::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperIris::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperIris& WrapperIris::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperIris_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperIris::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperIris)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(eye_landmarks_left_ != nullptr);
      eye_landmarks_left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(eye_landmarks_right_ != nullptr);
      eye_landmarks_right_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(iris_landmarks_left_ != nullptr);
      iris_landmarks_left_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(iris_landmarks_right_ != nullptr);
      iris_landmarks_right_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
  }
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperIris::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.NormalizedLandmarkList eye_landmarks_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eye_landmarks_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedLandmarkList eye_landmarks_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eye_landmarks_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedLandmarkList iris_landmarks_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_iris_landmarks_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedLandmarkList iris_landmarks_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_iris_landmarks_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedRect rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.DetectionList detection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperIris::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperIris)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkList eye_landmarks_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::eye_landmarks_left(this), target, stream);
  }

  // optional .mediapipe.NormalizedLandmarkList eye_landmarks_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eye_landmarks_right(this), target, stream);
  }

  // optional .mediapipe.NormalizedLandmarkList iris_landmarks_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::iris_landmarks_left(this), target, stream);
  }

  // optional .mediapipe.NormalizedLandmarkList iris_landmarks_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::iris_landmarks_right(this), target, stream);
  }

  // optional .mediapipe.NormalizedRect rect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rect(this), target, stream);
  }

  // optional .mediapipe.DetectionList detection = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::detection(this), target, stream);
  }

  // optional int64 frame_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperIris)
  return target;
}

size_t WrapperIris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperIris)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .mediapipe.NormalizedLandmarkList eye_landmarks_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eye_landmarks_left_);
    }

    // optional .mediapipe.NormalizedLandmarkList eye_landmarks_right = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eye_landmarks_right_);
    }

    // optional .mediapipe.NormalizedLandmarkList iris_landmarks_left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iris_landmarks_left_);
    }

    // optional .mediapipe.NormalizedLandmarkList iris_landmarks_right = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iris_landmarks_right_);
    }

    // optional .mediapipe.NormalizedRect rect = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_);
    }

    // optional int64 frame_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperIris::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperIris)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperIris* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperIris>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperIris)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperIris)
    MergeFrom(*source);
  }
}

void WrapperIris::MergeFrom(const WrapperIris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperIris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_eye_landmarks_left()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_eye_landmarks_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_eye_landmarks_right()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_eye_landmarks_right());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_iris_landmarks_left()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_iris_landmarks_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_iris_landmarks_right()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_iris_landmarks_right());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_detection()->::mediapipe::DetectionList::MergeFrom(from._internal_detection());
    }
    if (cached_has_bits & 0x00000040u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WrapperIris::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperIris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperIris::CopyFrom(const WrapperIris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperIris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperIris::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_detection()) {
    if (!detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperIris::InternalSwap(WrapperIris* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperIris, frame_id_)
      + sizeof(WrapperIris::frame_id_)
      - PROTOBUF_FIELD_OFFSET(WrapperIris, eye_landmarks_left_)>(
          reinterpret_cast<char*>(&eye_landmarks_left_),
          reinterpret_cast<char*>(&other->eye_landmarks_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperIris::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperFaceMesh::InitAsDefaultInstance() {
  ::mediapipe::_WrapperFaceMesh_default_instance_._instance.get_mutable()->landmarkgroup_ = const_cast< ::mediapipe::NormalizedLandmarkGroup*>(
      ::mediapipe::NormalizedLandmarkGroup::internal_default_instance());
  ::mediapipe::_WrapperFaceMesh_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperFaceMesh_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperFaceMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperFaceMesh>()._has_bits_);
  static const ::mediapipe::NormalizedLandmarkGroup& landmarkgroup(const WrapperFaceMesh* msg);
  static void set_has_landmarkgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::NormalizedRect& rect(const WrapperFaceMesh* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::DetectionList& detection(const WrapperFaceMesh* msg);
  static void set_has_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::NormalizedLandmarkGroup&
WrapperFaceMesh::_Internal::landmarkgroup(const WrapperFaceMesh* msg) {
  return *msg->landmarkgroup_;
}
const ::mediapipe::NormalizedRect&
WrapperFaceMesh::_Internal::rect(const WrapperFaceMesh* msg) {
  return *msg->rect_;
}
const ::mediapipe::DetectionList&
WrapperFaceMesh::_Internal::detection(const WrapperFaceMesh* msg) {
  return *msg->detection_;
}
WrapperFaceMesh::WrapperFaceMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperFaceMesh)
}
WrapperFaceMesh::WrapperFaceMesh(const WrapperFaceMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_landmarkgroup()) {
    landmarkgroup_ = new ::mediapipe::NormalizedLandmarkGroup(*from.landmarkgroup_);
  } else {
    landmarkgroup_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperFaceMesh)
}

void WrapperFaceMesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto.base);
  ::memset(&landmarkgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&landmarkgroup_)) + sizeof(frame_id_));
}

WrapperFaceMesh::~WrapperFaceMesh() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperFaceMesh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperFaceMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete landmarkgroup_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperFaceMesh::ArenaDtor(void* object) {
  WrapperFaceMesh* _this = reinterpret_cast< WrapperFaceMesh* >(object);
  (void)_this;
}
void WrapperFaceMesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperFaceMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperFaceMesh& WrapperFaceMesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperFaceMesh_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperFaceMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperFaceMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landmarkgroup_ != nullptr);
      landmarkgroup_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
  }
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperFaceMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmarkgroup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedRect rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.DetectionList detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperFaceMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperFaceMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landmarkgroup(this), target, stream);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rect(this), target, stream);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detection(this), target, stream);
  }

  // optional int64 frame_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperFaceMesh)
  return target;
}

size_t WrapperFaceMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperFaceMesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.NormalizedLandmarkGroup landmarkgroup = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *landmarkgroup_);
    }

    // optional .mediapipe.NormalizedRect rect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_);
    }

    // optional int64 frame_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperFaceMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperFaceMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperFaceMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperFaceMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperFaceMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperFaceMesh)
    MergeFrom(*source);
  }
}

void WrapperFaceMesh::MergeFrom(const WrapperFaceMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperFaceMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_landmarkgroup()->::mediapipe::NormalizedLandmarkGroup::MergeFrom(from._internal_landmarkgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection()->::mediapipe::DetectionList::MergeFrom(from._internal_detection());
    }
    if (cached_has_bits & 0x00000008u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WrapperFaceMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperFaceMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperFaceMesh::CopyFrom(const WrapperFaceMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperFaceMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperFaceMesh::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_detection()) {
    if (!detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperFaceMesh::InternalSwap(WrapperFaceMesh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperFaceMesh, frame_id_)
      + sizeof(WrapperFaceMesh::frame_id_)
      - PROTOBUF_FIELD_OFFSET(WrapperFaceMesh, landmarkgroup_)>(
          reinterpret_cast<char*>(&landmarkgroup_),
          reinterpret_cast<char*>(&other->landmarkgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperFaceMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperUpperBody::InitAsDefaultInstance() {
  ::mediapipe::_WrapperUpperBody_default_instance_._instance.get_mutable()->landmarks_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperUpperBody_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperUpperBody_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperUpperBody::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperUpperBody>()._has_bits_);
  static const ::mediapipe::NormalizedLandmarkList& landmarks(const WrapperUpperBody* msg);
  static void set_has_landmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::NormalizedRect& rect(const WrapperUpperBody* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::DetectionList& detection(const WrapperUpperBody* msg);
  static void set_has_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::NormalizedLandmarkList&
WrapperUpperBody::_Internal::landmarks(const WrapperUpperBody* msg) {
  return *msg->landmarks_;
}
const ::mediapipe::NormalizedRect&
WrapperUpperBody::_Internal::rect(const WrapperUpperBody* msg) {
  return *msg->rect_;
}
const ::mediapipe::DetectionList&
WrapperUpperBody::_Internal::detection(const WrapperUpperBody* msg) {
  return *msg->detection_;
}
WrapperUpperBody::WrapperUpperBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperUpperBody)
}
WrapperUpperBody::WrapperUpperBody(const WrapperUpperBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_landmarks()) {
    landmarks_ = new ::mediapipe::NormalizedLandmarkList(*from.landmarks_);
  } else {
    landmarks_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperUpperBody)
}

void WrapperUpperBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperUpperBody_wrapper_5fmodel_2eproto.base);
  ::memset(&landmarks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&landmarks_)) + sizeof(frame_id_));
}

WrapperUpperBody::~WrapperUpperBody() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperUpperBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperUpperBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete landmarks_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperUpperBody::ArenaDtor(void* object) {
  WrapperUpperBody* _this = reinterpret_cast< WrapperUpperBody* >(object);
  (void)_this;
}
void WrapperUpperBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperUpperBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperUpperBody& WrapperUpperBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperUpperBody_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperUpperBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperUpperBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landmarks_ != nullptr);
      landmarks_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
  }
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperUpperBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.NormalizedRect rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.DetectionList detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperUpperBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperUpperBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landmarks(this), target, stream);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rect(this), target, stream);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detection(this), target, stream);
  }

  // optional int64 frame_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperUpperBody)
  return target;
}

size_t WrapperUpperBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperUpperBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *landmarks_);
    }

    // optional .mediapipe.NormalizedRect rect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_);
    }

    // optional int64 frame_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperUpperBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperUpperBody)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperUpperBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperUpperBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperUpperBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperUpperBody)
    MergeFrom(*source);
  }
}

void WrapperUpperBody::MergeFrom(const WrapperUpperBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperUpperBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_landmarks()->::mediapipe::NormalizedLandmarkList::MergeFrom(from._internal_landmarks());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection()->::mediapipe::DetectionList::MergeFrom(from._internal_detection());
    }
    if (cached_has_bits & 0x00000008u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WrapperUpperBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperUpperBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperUpperBody::CopyFrom(const WrapperUpperBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperUpperBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperUpperBody::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_detection()) {
    if (!detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperUpperBody::InternalSwap(WrapperUpperBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperUpperBody, frame_id_)
      + sizeof(WrapperUpperBody::frame_id_)
      - PROTOBUF_FIELD_OFFSET(WrapperUpperBody, landmarks_)>(
          reinterpret_cast<char*>(&landmarks_),
          reinterpret_cast<char*>(&other->landmarks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperUpperBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrapperObjectTracking::InitAsDefaultInstance() {
  ::mediapipe::_WrapperObjectTracking_default_instance_._instance.get_mutable()->detections_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
class WrapperObjectTracking::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperObjectTracking>()._has_bits_);
  static const ::mediapipe::DetectionList& detections(const WrapperObjectTracking* msg);
  static void set_has_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mediapipe::DetectionList&
WrapperObjectTracking::_Internal::detections(const WrapperObjectTracking* msg) {
  return *msg->detections_;
}
WrapperObjectTracking::WrapperObjectTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.WrapperObjectTracking)
}
WrapperObjectTracking::WrapperObjectTracking(const WrapperObjectTracking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detections()) {
    detections_ = new ::mediapipe::DetectionList(*from.detections_);
  } else {
    detections_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperObjectTracking)
}

void WrapperObjectTracking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto.base);
  ::memset(&detections_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&detections_)) + sizeof(frame_id_));
}

WrapperObjectTracking::~WrapperObjectTracking() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperObjectTracking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperObjectTracking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete detections_;
}

void WrapperObjectTracking::ArenaDtor(void* object) {
  WrapperObjectTracking* _this = reinterpret_cast< WrapperObjectTracking* >(object);
  (void)_this;
}
void WrapperObjectTracking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperObjectTracking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperObjectTracking& WrapperObjectTracking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperObjectTracking_wrapper_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WrapperObjectTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperObjectTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(detections_ != nullptr);
    detections_->Clear();
  }
  frame_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperObjectTracking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.DetectionList detections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detections(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperObjectTracking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperObjectTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.DetectionList detections = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detections(this), target, stream);
  }

  // optional int64 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperObjectTracking)
  return target;
}

size_t WrapperObjectTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperObjectTracking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.DetectionList detections = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detections_);
    }

    // optional int64 frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperObjectTracking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperObjectTracking)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperObjectTracking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperObjectTracking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperObjectTracking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperObjectTracking)
    MergeFrom(*source);
  }
}

void WrapperObjectTracking::MergeFrom(const WrapperObjectTracking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperObjectTracking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_detections()->::mediapipe::DetectionList::MergeFrom(from._internal_detections());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WrapperObjectTracking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperObjectTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperObjectTracking::CopyFrom(const WrapperObjectTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperObjectTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperObjectTracking::IsInitialized() const {
  if (_internal_has_detections()) {
    if (!detections_->IsInitialized()) return false;
  }
  return true;
}

void WrapperObjectTracking::InternalSwap(WrapperObjectTracking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperObjectTracking, frame_id_)
      + sizeof(WrapperObjectTracking::frame_id_)
      - PROTOBUF_FIELD_OFFSET(WrapperObjectTracking, detections_)>(
          reinterpret_cast<char*>(&detections_),
          reinterpret_cast<char*>(&other->detections_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperObjectTracking::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::Landmark* Arena::CreateMaybeMessage< ::mediapipe::Landmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarkList* Arena::CreateMaybeMessage< ::mediapipe::LandmarkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LandmarkList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedLandmark* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::NormalizedLandmark >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedLandmarkList* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmarkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::NormalizedLandmarkList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedLandmarkGroup* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmarkGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::NormalizedLandmarkGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Rect* Arena::CreateMaybeMessage< ::mediapipe::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedRect* Arena::CreateMaybeMessage< ::mediapipe::NormalizedRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::NormalizedRect >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Rasterization_Interval* Arena::CreateMaybeMessage< ::mediapipe::Rasterization_Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Rasterization_Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Rasterization* Arena::CreateMaybeMessage< ::mediapipe::Rasterization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Rasterization >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LocationData_BoundingBox* Arena::CreateMaybeMessage< ::mediapipe::LocationData_BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LocationData_BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LocationData_RelativeBoundingBox* Arena::CreateMaybeMessage< ::mediapipe::LocationData_RelativeBoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LocationData_RelativeBoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LocationData_BinaryMask* Arena::CreateMaybeMessage< ::mediapipe::LocationData_BinaryMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LocationData_BinaryMask >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LocationData_RelativeKeypoint* Arena::CreateMaybeMessage< ::mediapipe::LocationData_RelativeKeypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LocationData_RelativeKeypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LocationData* Arena::CreateMaybeMessage< ::mediapipe::LocationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LocationData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Detection_AssociatedDetection* Arena::CreateMaybeMessage< ::mediapipe::Detection_AssociatedDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Detection_AssociatedDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Detection* Arena::CreateMaybeMessage< ::mediapipe::Detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::DetectionList* Arena::CreateMaybeMessage< ::mediapipe::DetectionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::DetectionList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperHandTracking* Arena::CreateMaybeMessage< ::mediapipe::WrapperHandTracking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperHandTracking >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperMultiHand* Arena::CreateMaybeMessage< ::mediapipe::WrapperMultiHand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperMultiHand >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperIris* Arena::CreateMaybeMessage< ::mediapipe::WrapperIris >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperIris >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperFaceMesh* Arena::CreateMaybeMessage< ::mediapipe::WrapperFaceMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperFaceMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperUpperBody* Arena::CreateMaybeMessage< ::mediapipe::WrapperUpperBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperUpperBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::WrapperObjectTracking* Arena::CreateMaybeMessage< ::mediapipe::WrapperObjectTracking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::WrapperObjectTracking >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
